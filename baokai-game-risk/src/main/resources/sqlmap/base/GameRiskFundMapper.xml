<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.game.dao.vo.GameRiskFund">
	<resultMap id="GameRiskFundResult" type="com.winterframework.firefrog.game.dao.vo.GameRiskFund">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="gameRiskFundColumns">
	    <![CDATA[
	        	ID as id,
	        	USERID as userid,
	        	ORDER_CODE as orderCode,
	        	PLAN_CODE as planCode,
	        	PLAN_DETAIL_ID as planDetailId,
	        	LOTTERYID as lotteryid,
	        	ISSUE_CODE as issueCode,
	        	AMOUNT as amount,
	        	FUND_TYPE as fundType,
	        	STATUS as status,
	        	CANCEL_STATUS as cancelStatus,
	        	CREATE_TIME as createTime,
	        	UPDATE_TIME as updateTime
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.game.dao.vo.GameRiskFund" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		   	     	<selectKey resultType="long" order="BEFORE" keyProperty="id">
						     SELECT   SEQ_GAME_RISK_FUND_ID.Nextval from dual
			   	    </selectKey>
			   	    
	    <![CDATA[
	        INSERT INTO
	        GAME_RISK_FUND (
	        	ID ,
	        	USERID ,
	        	ORDER_CODE ,
	        	PLAN_CODE ,
	        	PLAN_DETAIL_ID ,
	        	LOTTERYID ,
	        	ISSUE_CODE ,
	        	AMOUNT ,
	        	FUND_TYPE ,
	        	STATUS ,
	        	CANCEL_STATUS ,
	        	CREATE_TIME ,
	        	UPDATE_TIME 
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{userid,javaType=long,jdbcType=DECIMAL} ,
	        	#{orderCode,javaType=string,jdbcType=VARCHAR} ,
	        	#{planCode,javaType=string,jdbcType=VARCHAR} ,
	        	#{planDetailId,javaType=long,jdbcType=DECIMAL} ,
	        	#{lotteryid,javaType=long,jdbcType=DECIMAL} ,
	        	#{issueCode,javaType=long,jdbcType=DECIMAL} ,
	        	#{amount,javaType=long,jdbcType=DECIMAL} ,
	        	#{fundType,javaType=long,jdbcType=DECIMAL} ,
	        	#{status,javaType=long,jdbcType=DECIMAL} ,
	        	#{cancelStatus,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{updateTime,javaType=object,jdbcType=TIMESTAMP} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.game.dao.vo.GameRiskFund">
	    <![CDATA[
	        UPDATE GAME_RISK_FUND SET
		        USERID = #{userid,javaType=long,jdbcType=DECIMAL} ,
		        ORDER_CODE = #{orderCode,javaType=string,jdbcType=VARCHAR} ,
		        PLAN_CODE = #{planCode,javaType=string,jdbcType=VARCHAR} ,
		        PLAN_DETAIL_ID = #{planDetailId,javaType=long,jdbcType=DECIMAL} ,
		        LOTTERYID = #{lotteryid,javaType=long,jdbcType=DECIMAL} ,
		        ISSUE_CODE = #{issueCode,javaType=long,jdbcType=DECIMAL} ,
		        AMOUNT = #{amount,javaType=long,jdbcType=DECIMAL} ,
		        FUND_TYPE = #{fundType,javaType=long,jdbcType=DECIMAL} ,
		        STATUS = #{status,javaType=long,jdbcType=DECIMAL} ,
		        CANCEL_STATUS = #{cancelStatus,javaType=long,jdbcType=DECIMAL} ,
		        CREATE_TIME = #{createTime,javaType=object,jdbcType=TIMESTAMP} ,
		        UPDATE_TIME = #{updateTime,javaType=object,jdbcType=TIMESTAMP} 
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from GAME_RISK_FUND where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="GameRiskFundResult" flushCache="false">
			select <include refid="gameRiskFundColumns" />
		    <![CDATA[
			    from GAME_RISK_FUND 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="GameRiskFundResult" flushCache="false">
			select <include refid="gameRiskFundColumns" />
			    from GAME_RISK_FUND 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	

	<sql id="gameRiskFundDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userid)">
				and USERID = #{userid}
			</if>
	       <if test="@Ognl@isNotEmpty(orderCode)">
				and ORDER_CODE = #{orderCode}
			</if>
	       <if test="@Ognl@isNotEmpty(planCode)">
				and PLAN_CODE = #{planCode}
			</if>
	       <if test="@Ognl@isNotEmpty(planDetailId)">
				and PLAN_DETAIL_ID = #{planDetailId}
			</if>
	       <if test="@Ognl@isNotEmpty(lotteryid)">
				and LOTTERYID = #{lotteryid}
			</if>
	       <if test="@Ognl@isNotEmpty(issueCode)">
				and ISSUE_CODE = #{issueCode}
			</if>
	       <if test="@Ognl@isNotEmpty(amount)">
				and AMOUNT = #{amount}
			</if>
	       <if test="@Ognl@isNotEmpty(fundType)">
				and FUND_TYPE = #{fundType}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and STATUS = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(cancelStatus)">
				and CANCEL_STATUS = #{cancelStatus}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and CREATE_TIME = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and UPDATE_TIME = #{updateTime}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="GameRiskFundResult"  flushCache="false">
    	select <include refid="gameRiskFundColumns" />
	    from GAME_RISK_FUND 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from GAME_RISK_FUND 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from GAME_RISK_FUND 
		<include refid="gameRiskFundDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="GameRiskFundResult">
    	select <include refid="gameRiskFundColumns" />
	    from GAME_RISK_FUND 
		<include refid="gameRiskFundDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>
