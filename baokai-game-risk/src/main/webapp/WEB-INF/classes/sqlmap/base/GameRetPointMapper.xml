<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.game.dao.vo.GameRetPoint">
	<resultMap id="GameRetPointResult" type="com.winterframework.firefrog.game.dao.vo.GameRetPoint">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="gameRetPointColumns">
	    <![CDATA[
	        	ID as id,
	        	GAME_ORDER_ID as gameOrderId,
	        	CREATE_TIME as createTime,
	        	RET_POINT_CHAIN as retPointChain,
	        	STATUS as status,
	        	ISSUECODE as issueCode,
	        	RET_USER_CHAIN as retUserChain
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.game.dao.vo.GameRetPoint" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		  <selectKey resultType="long" order="BEFORE" keyProperty="id">
			     SELECT SEQ_GAME_RET_POINT.Nextval from dual
   	    </selectKey>
	    <![CDATA[
	       INSERT INTO
	        GAME_RET_POINT (
	        	ID ,
	        	GAME_ORDER_ID ,
	        	CREATE_TIME ,
	        	RET_POINT_CHAIN ,
	        	STATUS ,
	        	ISSUECODE,
	        	RET_USER_CHAIN
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{gameOrderId,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{retPointChain,javaType=string,jdbcType=DECIMAL} ,
	        	#{status,javaType=integer,jdbcType=DECIMAL} ,
	        	#{issueCode,javaType=long,jdbcType=DECIMAL} ,
	        	#{retUserChain,javaType=string,jdbcType=DECIMAL} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.game.dao.vo.GameRetPoint">
	    <![CDATA[
	        UPDATE GAME_RET_POINT SET
		        GAME_ORDER_ID = #{gameOrderId,javaType=long,jdbcType=DECIMAL} ,
		        CREATE_TIME = #{createTime,javaType=object,jdbcType=TIMESTAMP} ,
		        RET_POINT_CHAIN = #{retPointChain,javaType=string,jdbcType=DECIMAL} ,
		        STATUS = #{status,javaType=integer,jdbcType=DECIMAL},
		        ISSUECODE = #{issueCode,javaType=long,jdbcType=DECIMAL} ,
		        RET_USER_CHAIN = #{retUserChain,javaType=string,jdbcType=DECIMAL} 
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
		
		<update id="updateStatus" parameterType="hashMap" >				
			  	UPDATE GAME_RET_POINT SET STATUS =  #{status} 
		        where GAME_ORDER_ID in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
				#{item}				
				</foreach>					
		</update>
		
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from GAME_RET_POINT where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="GameRetPointResult" flushCache="false">
			select <include refid="gameRetPointColumns" />
		    <![CDATA[
			    from GAME_RET_POINT 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="GameRetPointResult" flushCache="false">
			select <include refid="gameRetPointColumns" />
			    from GAME_RET_POINT 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	

	<sql id="gameRetPointDynamicWhere">
		<!-- ognl访问静态方法的表达式 为class org.apache.maven.project.MavenProjectmethod(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(gameOrderId)">
				and GAME_ORDER_ID = #{gameOrderId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and CREATE_TIME = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(retPointChain)">
				and RET_POINT_CHAIN = #{retPointChain}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and STATUS = #{status}
			</if>
			 <if test="@Ognl@isNotEmpty(issueCode)">
				and ISSUECODE = #{issueCode}
			</if>
			  <if test="@Ognl@isNotEmpty(retUserChain)">
				and RET_USER_CHAIN = #{retUserChain}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="GameRetPointResult"  flushCache="false">
    	select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from GAME_RET_POINT 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from GAME_RET_POINT 
		<include refid="gameRetPointDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="GameRetPointResult">
    	select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 
		<include refid="gameRetPointDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<select id="getGameRetPointByStatus" parameterType="int" resultMap="GameRetPointResult">
    	select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 
	    where status = #{status}
    </select>
    
	<select id="getGameRetPointByIssueCode" parameterType="long" resultMap="GameRetPointResult">
    	select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 
	    WHERE GAME_ORDER_ID IN (select ID from GAME_ORDER WHERE ISSUE_CODE = #{issueCode})
    </select>
    
    <select id="getGameRetPointByLotteryIssue"  resultMap="GameRetPointResult">
    	select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 
	    WHERE GAME_ORDER_ID IN (select ID from GAME_ORDER WHERE ISSUE_CODE = #{issueCode} AND LOTTERYID = #{lotteryId})
    </select>
    
    <select id="getGameRetPointByGameOrderId" parameterType="long" resultMap="GameRetPointResult">
    	select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 
	    WHERE GAME_ORDER_ID = #{gameOrderId}
    </select>
    <select id="getRetPointTotalAmountByOrderId" parameterType="long" resultType="long">
        select sum(ret_point) from game_ret_point p where p.game_order_id =#{id} and status = 1
    </select>
    <select id="getRetPointByOrderId" parameterType="long" resultMap="GameRetPointResult">
       select <include refid="gameRetPointColumns" />
	    from GAME_RET_POINT 
	    WHERE GAME_ORDER_ID = #{id} and status = 1
    </select>
</mapper>
