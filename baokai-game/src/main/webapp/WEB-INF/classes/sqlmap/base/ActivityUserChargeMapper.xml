<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.game.dao.vo.ActivityUserCharge">
	<resultMap id="ActivityUserChargeResult" type="com.winterframework.firefrog.game.dao.vo.ActivityUserCharge">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="activityUserChargeColumns">
	    <![CDATA[
	        	ID as id,
	        	TYPE as type,
	        	USER_ID as userId,
	        	GMT_CREATED as gmtCreated,
	        	MONEY_DATE as moneyDate,
	        	AMOUNT as amount,
	        	SOURCE as source
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.game.dao.vo.ActivityUserCharge" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		   	     	<selectKey resultType="long" order="BEFORE" keyProperty="id">
						     SELECT   SEQ_ACTIVITY_USER_CHARGE_ID.Nextval from dual
			   	    </selectKey>
			   	    
	    <![CDATA[
	        INSERT INTO
	        ACTIVITY_USER_CHARGE (
	        	ID ,
	        	TYPE ,
	        	USER_ID ,
	        	GMT_CREATED ,
	        	MONEY_DATE ,
	        	AMOUNT ,
	        	SOURCE 
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{type,javaType=long,jdbcType=DECIMAL} ,
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{gmtCreated,javaType=object,jdbcType=OTHER} ,
	        	#{moneyDate,javaType=string,jdbcType=VARCHAR} ,
	        	#{amount,javaType=long,jdbcType=DECIMAL} ,
	        	#{source,javaType=string,jdbcType=VARCHAR} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.game.dao.vo.ActivityUserCharge">
	    <![CDATA[
	        UPDATE ACTIVITY_USER_CHARGE SET
		        TYPE = #{type,javaType=long,jdbcType=DECIMAL} ,
		        USER_ID = #{userId,javaType=long,jdbcType=DECIMAL} ,
		        MONEY_DATE = #{moneyDate,javaType=string,jdbcType=VARCHAR} ,
		        AMOUNT = #{amount,javaType=long,jdbcType=DECIMAL} ,
		        SOURCE = #{source,javaType=string,jdbcType=VARCHAR} 
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ACTIVITY_USER_CHARGE where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="ActivityUserChargeResult" flushCache="false">
			select <include refid="activityUserChargeColumns" />
		    <![CDATA[
			    from ACTIVITY_USER_CHARGE 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="ActivityUserChargeResult" flushCache="false">
			select <include refid="activityUserChargeColumns" />
			    from ACTIVITY_USER_CHARGE 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	

	<sql id="activityUserChargeDynamicWhere">
		<!-- ognl访问静态方法的表达式 为class org.apache.maven.project.MavenProjectmethod(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				and TYPE = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(gmtCreated)">
				and GMT_CREATED = #{gmtCreated}
			</if>
	       <if test="@Ognl@isNotEmpty(moneyDate)">
				and MONEY_DATE = #{moneyDate}
			</if>
	       <if test="@Ognl@isNotEmpty(amount)">
				and AMOUNT = #{amount}
			</if>
	       <if test="@Ognl@isNotEmpty(source)">
				and SOURCE = #{source}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="ActivityUserChargeResult"  flushCache="false">
    	select <include refid="activityUserChargeColumns" />
	    from ACTIVITY_USER_CHARGE 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ACTIVITY_USER_CHARGE 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ACTIVITY_USER_CHARGE 
		<include refid="activityUserChargeDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="ActivityUserChargeResult">
    	select <include refid="activityUserChargeColumns" />
	    from ACTIVITY_USER_CHARGE 
		<include refid="activityUserChargeDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>
