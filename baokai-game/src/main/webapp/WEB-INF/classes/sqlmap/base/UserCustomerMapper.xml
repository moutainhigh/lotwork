<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.user.dao.vo.UserCustomer">
	<!-- 個人資料的VO -->
	<resultMap id="UserCustomerResult"
		type="com.winterframework.firefrog.user.dao.vo.UserCustomer">
	</resultMap>

	<!-- 報表相關資料的VO -->
	<resultMap id="userCenterReport"
		type="com.winterframework.firefrog.game.dao.vo.UserCenterReportVo">
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="userCustomerColumns">
	    <![CDATA[
	        	ID as id,
	        	ACCOUNT as account,
	        	PASSWD as passwd,
	        	PASSWD_LVL as passwdLvl,
	        	WITHDRAW_PASSWD as withdrawPasswd,
	        	CIPHER as cipher,
	        	SEX as sex,
	        	EMAIL as email,
	        	EMAIL_ACTIVED as emailActived,
	        	CELLPHONE as cellphone,
	        	BIRTHDAY as birthday,
	        	QQ_STRUCTURE as qqStruc,
	        	IS_FREEZE as isFreeze,
	        	USER_LVL as userLvl,
	        	QU_STRUC as quStruc,
	        	WITHDRAW_PASSWD_ACTIVE_DATE as withdrawPasswdActiveDate,
	        	QUESTION_STRUCTURE_ACTIVE_DATE as questionStructureActiveDate,
	        	REGISTER_IP as registerIp,
	        	REGISTER_DATE as registerDate,
	        	PARENT_ID as parentId,
	        	USER_CHAIN as userChain,
	        	LAST_LOGIN_DATE as lastLoginDate,
	        	TERM_A_COUNT as termAcount,
	        	FREEZE_DATE as freezeDate,
	        	FREEZER as freezer,
	        	VIP_CELLPHONE as vipCellphone,
	        	vip_Lvl as vipLvl,
	        	TERM_U_ACCOUNT as termUaccount,
	        	AGENT_LIMIT as agentLimit,
	        	FREEZE_METHOD as freezeMethod,
	        	LAST_LOGIN_IP as lastLoginIp,
	        	FREEZE_MEMO as freezeMemo,
	        	FREEZE_ACCOUNT as freezeAccount,
	        	freeze_id as freezeId,
	        	source	as source,
				AWARD_RET_STATUS as awardRetStatus,
	        	SUPER_PAIR_STATUS as superPairStatus,
	        	LHC_STATUS as lhcStatus,
	        	NICK_NAME as nickName,
	        	HEAD_IMG as headImg
	    ]]>
	</sql>
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert"
		parameterType="com.winterframework.firefrog.user.dao.vo.UserCustomer"
		useGeneratedKeys="false" keyProperty="id" flushCache="true">
		<selectKey resultType="long" order="BEFORE" keyProperty="id">
			SELECT SEQ_USER_CUSTOMER_ID.Nextval from dual
		</selectKey>
			   	    
	    <![CDATA[
	        INSERT INTO
	        USER_CUSTOMER (
	        	ID ,
	        	ACCOUNT ,
	        	PASSWD ,
	        	PASSWD_LVL ,
	        	WITHDRAW_PASSWD ,
	        	CIPHER ,
	        	SEX ,
	        	EMAIL ,
	        	EMAIL_ACTIVED ,
	        	CELLPHONE ,
	        	BIRTHDAY ,
	        	QQ_STRUCTURE ,
	        	IS_FREEZE ,
	        	USER_LVL ,
	        	QU_STRUC ,
	        	WITHDRAW_PASSWD_ACTIVE_DATE ,
	        	QUESTION_STRUCTURE_ACTIVE_DATE ,
	        	REGISTER_IP ,
	        	REGISTER_DATE ,
	        	PARENT_ID ,
	        	USER_CHAIN ,
	        	LAST_LOGIN_DATE ,
	        	TERM_A_COUNT ,
	        	FREEZE_DATE ,
	        	FREEZER ,
	        	VIP_CELLPHONE ,
	        	TERM_U_ACCOUNT ,
	        	AGENT_LIMIT ,
	        	FREEZE_METHOD ,
	        	LAST_LOGIN_IP ,
	        	FREEZE_MEMO,
	        	FREEZE_ACCOUNT,
	        	FREEZE_ID,
	        	AWARD_RET_STATUS,
	        	SUPER_PAIR_STATUS
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{account,javaType=string,jdbcType=VARCHAR} ,
	        	#{passwd,javaType=string,jdbcType=VARCHAR} ,
	        	#{passwdLvl,javaType=int,jdbcType=DECIMAL} ,
	        	#{withdrawPasswd,javaType=string,jdbcType=VARCHAR} ,
	        	#{cipher,javaType=string,jdbcType=VARCHAR} ,
	        	#{sex,javaType=int,jdbcType=DECIMAL} ,
	        	#{email,javaType=string,jdbcType=VARCHAR} ,
	        	#{emailActived,javaType=int,jdbcType=DECIMAL} ,
	        	#{cellphone,javaType=string,jdbcType=VARCHAR} ,
	        	#{birthday,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{qqStruc,javaType=string,jdbcType=VARCHAR} ,
	        	#{isFreeze,javaType=int,jdbcType=DECIMAL} ,
	        	#{userLvl,javaType=int,jdbcType=DECIMAL} ,
	        	#{quStruc,javaType=string,jdbcType=VARCHAR} ,
	        	#{withdrawPasswdActiveDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{questionStructureActiveDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{registerIp,javaType=long,jdbcType=DECIMAL} ,
	        	#{registerDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{parentId,javaType=long,jdbcType=DECIMAL} ,
	        	#{userChain,javaType=string,jdbcType=VARCHAR} ,
	        	#{lastLoginDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{termAcount,javaType=long,jdbcType=DECIMAL} ,
	        	#{freezeDate,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{freezer,javaType=int,jdbcType=DECIMAL} ,
	        	#{vipCellphone,javaType=string,jdbcType=VARCHAR} ,
	        	#{termUaccount,javaType=long,jdbcType=DECIMAL} ,
	        	#{agentLimit,javaType=long,jdbcType=DECIMAL} ,
	        	#{freezeMethod,javaType=long,jdbcType=DECIMAL} ,
	        	#{lastLoginIp,javaType=long,jdbcType=DECIMAL} ,
	        	#{freezeMemo, javaType=string,jdbcType=VARCHAR},
	        	#{freezeAccount, javaType=string,jdbcType=VARCHAR},
	        	#{freezeId,javaType=long,jdbcType=DECIMAL},
	        	#{awardRetStatus,javaType=int,jdbcType=DECIMAL},
	        	#{superPairStatus,javaType=int,jdbcType=DECIMAL}
	        )
	    ]]>

	</insert>

	<update id="update"
		parameterType="com.winterframework.firefrog.user.dao.vo.UserCustomer">
		UPDATE USER_CUSTOMER
		<set>
			<if test="@Ognl@isNotEmpty(account)">
				ACCOUNT = #{account,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(passwd)">
				PASSWD = #{passwd,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(passwdLvl)">
				PASSWD_LVL = #{passwdLvl,javaType=int,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(withdrawPasswd)">
				WITHDRAW_PASSWD = #{withdrawPasswd,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(cipher)">
				CIPHER = #{cipher,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(sex)">
				SEX = #{sex,javaType=int,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(email)">
				EMAIL = #{email,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(emailActived)">
				EMAIL_ACTIVED = #{emailActived,javaType=int,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(cellphone)">
				CELLPHONE = #{cellphone,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(birthday)">
				BIRTHDAY = #{birthday,javaType=object,jdbcType=TIMESTAMP} ,
			</if>
			<if test="@Ognl@isNotEmpty(qqStruc)">
				QQ_STRUCTURE = #{qqStruc,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(isFreeze)">
				IS_FREEZE = #{isFreeze,javaType=int,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(userLvl)">
				USER_LVL = #{userLvl,javaType=int,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(quStruc)">
				QU_STRUC = #{quStruc,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(withdrawPasswdActiveDate)">
				WITHDRAW_PASSWD_ACTIVE_DATE = #{withdrawPasswdActiveDate,javaType=object,jdbcType=DATE} ,
			</if>
			<if test="@Ognl@isNotEmpty(questionStructureActiveDate)">
				QUESTION_STRUCTURE_ACTIVE_DATE = #{questionStructureActiveDate,javaType=object,jdbcType=TIMESTAMP}
				,
			</if>
			<if test="@Ognl@isNotEmpty(registerIp)">
				REGISTER_IP = #{registerIp,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(registerDate)">
				REGISTER_DATE = #{registerDate,javaType=object,jdbcType=TIMESTAMP} ,
			</if>
			<if test="@Ognl@isNotEmpty(parentId)">
				PARENT_ID = #{parentId,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(userChain)">
				USER_CHAIN = #{userChain,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(lastLoginDate)">
				LAST_LOGIN_DATE = #{lastLoginDate,javaType=object,jdbcType=TIMESTAMP} ,
			</if>
			<if test="@Ognl@isNotEmpty(termAcount)">
				TERM_A_COUNT = #{termAcount,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeDate)">
				FREEZE_DATE = #{freezeDate,javaType=date,jdbcType=TIMESTAMP} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezer)">
				FREEZER = #{freezer,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(vipCellphone)">
				VIP_CELLPHONE = #{vipCellphone,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(termUaccount)">
				TERM_U_ACCOUNT = #{termUaccount,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(agentLimit)">
				AGENT_LIMIT = #{agentLimit,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeMethod)">
				FREEZE_METHOD = #{freezeMethod,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(lastLoginIp)">
				LAST_LOGIN_IP = #{lastLoginIp,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeMemo)">
				FREEZE_MEMO = #{freezeMemo, javaType=string,jdbcType=VARCHAR},
			</if>
			<if test="@Ognl@isNotEmpty(freezeAccount)">
				FREEZE_ACCOUNT = #{freezeAccount, javaType=string,jdbcType=VARCHAR},
			</if>
			<if test="@Ognl@isNotEmpty(freezeId)">
				freeze_id = #{freezeId, javaType=long,jdbcType=DECIMAL},
			</if>
			<if test="@Ognl@isNotEmpty(awardRetStatus)">
				AWARD_RET_STATUS = #{awardRetStatus,javaType=int,jdbcType=DECIMAL},
			</if>
			<if test="@Ognl@isNotEmpty(nickName)">
				NICK_NAME = #{nickName, javaType=string,jdbcType=VARCHAR},
			</if>
			<if test="@Ognl@isNotEmpty(headImg)">
				HEAD_IMG = #{headImg, javaType=string,jdbcType=VARCHAR},
			</if>
			<if test="@Ognl@isNotEmpty(superPairStatus)">
				SUPER_PAIR_STATUS = #{superPairStatus,javaType=int,jdbcType=DECIMAL}
			</if>
		</set>
		WHERE
		ID = #{id}
	</update>
	
	<delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from USER_CUSTOMER where
		        ID = #{id} 
	    ]]>
	</delete>
	
	<select id="getById" parameterType="long" resultMap="UserCustomerResult"
		flushCache="false">
		select
		<include refid="userCustomerColumns" />
		    <![CDATA[
			    from USER_CUSTOMER 
		        where 
		        ID = #{id} 
		    ]]>
	</select>
	
	<select id="getByIds" parameterType="list" resultMap="UserCustomerResult"
		flushCache="false">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER
		where id in
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select>

	<sql id="userCustomerDynamicWhere">
		<!-- ognl访问静态方法的表达式 为class org.apache.maven.project.MavenProjectmethod(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
			<if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(account)">
				<if test="@Ognl@isEmpty(isAccountMatch)">
					and ACCOUNT = #{account}
				</if>
				<if test="@Ognl@isNotEmpty(isAccountMatch)">
					and ACCOUNT like '%'||#{account}||'%'
				</if>

			</if>
			<if test="@Ognl@isNotEmpty(passwd)">
				and PASSWD = #{passwd}
			</if>
			<if test="@Ognl@isNotEmpty(passwdLvl)">
				and PASSWD_LVL = #{passwdLvl}
			</if>
			<if test="@Ognl@isNotEmpty(withdrawPasswd)">
				and WITHDRAW_PASSWD = #{withdrawPasswd}
			</if>
			<if test="@Ognl@isNotEmpty(cipher)">
				and CIPHER = #{cipher}
			</if>
			<if test="@Ognl@isNotEmpty(sex)">
				and SEX = #{sex}
			</if>
			<if test="@Ognl@isNotEmpty(email)">
				and EMAIL = #{email}
			</if>
			<if test="@Ognl@isNotEmpty(emailActived)">
				and EMAIL_ACTIVED = #{emailActived}
			</if>
			<if test="@Ognl@isNotEmpty(cellphone)">
				and CELLPHONE = #{cellphone}
			</if>
			<if test="@Ognl@isNotEmpty(birthday)">
				and BIRTHDAY = #{birthday}
			</if>
			<if test="@Ognl@isNotEmpty(qqStructure)">
				and QQ_STRUCTURE = #{qqStructure}
			</if>
			<if test="@Ognl@isNotEmpty(isFreeze)">
				and IS_FREEZE = #{isFreeze}
			</if>
			<if test="@Ognl@isNotEmpty(userLvl)">
				and USER_LVL = #{userLvl}
			</if>
			<if test="@Ognl@isNotEmpty(quStruc)">
				and QU_STRUC = #{quStruc}
			</if>
			<if test="@Ognl@isNotEmpty(withdrawPasswdActiveDate)">
				and WITHDRAW_PASSWD_ACTIVE_DATE =
				#{withdrawPasswdActiveDate}
			</if>
			<if test="@Ognl@isNotEmpty(questionStructureActiveDate)">
				and QUESTION_STRUCTURE_ACTIVE_DATE =
				#{questionStructureActiveDate}
			</if>
			<if test="@Ognl@isNotEmpty(registerIp)">
				and REGISTER_IP = #{registerIp}
			</if>
			<if test="@Ognl@isNotEmpty(registerDate)">
				and REGISTER_DATE = #{registerDate}
			</if>
			<if test="@Ognl@isNotEmpty(parentId)">
				and PARENT_ID = #{parentId}
			</if>
			<if test="@Ognl@isNotEmpty(userChain)">
				and USER_CHAIN = #{userChain}
			</if>
			<if test="@Ognl@isNotEmpty(lastLoginDate)">
				and LAST_LOGIN_DATE = #{lastLoginDate}
			</if>
			<if test="@Ognl@isNotEmpty(termAcount)">
				and TERM_A_COUNT = #{termAcount}
			</if>
			<if test="@Ognl@isNotEmpty(freezeDate)">
				and FREEZE_DATE = #{freezeDate}
			</if>
			<if test="@Ognl@isNotEmpty(freezer)">
				and FREEZER = #{freezer}
			</if>
			<if test="@Ognl@isNotEmpty(vipCellphone)">
				and VIP_CELLPHONE = #{vipCellphone}
			</if>
			<if test="@Ognl@isNotEmpty(termUaccount)">
				and TERM_U_ACCOUNT = #{termUaccount}
			</if>
			<if test="@Ognl@isNotEmpty(agentLimit)">
				and AGENT_LIMIT = #{agentLimit}
			</if>
			<if test="@Ognl@isNotEmpty(freezeMethod)">
				and FREEZE_METHOD = #{freezeMethod}
			</if>
			<if test="@Ognl@isNotEmpty(lastLoginIp)">
				and LAST_LOGIN_IP = #{lastLoginIp}
			</if>
			<if test="@Ognl@isNotEmpty(freezeMemo)">
				and FREEZE_MEMO = #{freezeMemo}
			</if>
			<if test="@Ognl@isNotEmpty(freezeAccount)">
				and FREEZE_ACCOUNT = #{freezeAccount}
			</if>
			<if test="@Ognl@isNotEmpty(freezeId)">
				and FREEZE_Id = #{freezeId}
			</if>
			<if test="@Ognl@isNotEmpty(awardRetStatus)">
				and AWARD_RET_STATUS = #{awardRetStatus}
			</if>
			<if test="@Ognl@isNotEmpty(superPairStatus)">
				and SUPER_PAIR_STATUS = #{superPairStatus}
			</if>
			<if test="@Ognl@isNotEmpty(nickName)">
				and NICK_NAME = #{nickName}
			</if>
			<if test="@Ognl@isNotEmpty(headImg)">
				and HEAD_IMG = #{headImg}
			</if>
		</where>
	</sql>

	<select id="getAll" resultMap="UserCustomerResult" flushCache="false">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	
	<select id="getCount" resultType="long">
		select count(*) from USER_CUSTOMER
	</select>
	
	<select id="getCountByPage" resultType="long">
		select count(*) from USER_CUSTOMER
		<include refid="userCustomerDynamicWhere" />
	</select>

	<!-- 分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页 因为分页查询将传 offset,pageSize,lastRows 
		三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现 -->
	<select id="getByPage" resultMap="UserCustomerResult">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER
		<include refid="userCustomerDynamicWhere" />
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>

	<select id="queryCustomerList" resultMap="UserCustomerResult"
		parameterType="HashMap">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER
		<include refid="queryDynamicWhere" />
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	<select id="queryCustomerByUserChain" resultMap="UserCustomerResult" parameterType="HashMap">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER
		where user_chain=${userChain}
	</select>
	<!-- 查詢個人報表 默認為當天資訊-->
	<select id="queryCurrentUserReport" resultMap="userCenterReport" parameterType="long">
	SELECT
		  UC.ID as userId,
		  UC.ACCOUNT as account,
		  UC.USER_LVL as userLvl,
		  UC.USER_CHAIN as userChain,
		  REPORT.V1 as totalSubuserSaleroom,
		  REPORT.V2 as totalSubuserWins,
		  REPORT.V3 as totalSubuserPoint,
		  (select 
		  	NVL(SUM(uag.AMOUNT),0) 
		  from USER_ACTIVITY_GIFTS uag 
		  join USER_CUSTOMER_FOR_REPORT_TEMP ucfrt on ucfrt.O_ID = uag.USER_ID 
		  where uag.CREATE_TIME >= TRUNC(SYSDATE)
		    and ucfrt.U_ID = UC.ID
		  ) as activityGifts,
      REPORT.V5 as trueBet,
      REPORT.V6 as result
		FROM (
		  select
		    SUM(NVL(B.total_amount,0)) AS V1,
		    SUM(NVL(B.total_win,0)) AS V2,
		    SUM(NVL(B.total_ret,0)) AS V3,
        	SUM(NVL(B.total_bet,0)) AS V5,
        	SUM(NVL(B.total_result,0)) AS V6,
		    A.U_ID V7
		  from USER_CUSTOMER_FOR_REPORT_TEMP A 
		  left join GAME_ORDER_REPORT B on B.USER_ID = A.O_ID
		  and B.CREATE_TIME >= TRUNC(SYSDATE)
		  group by A.U_ID
		) REPORT JOIN USER_CUSTOMER UC ON REPORT.V7 = UC.ID
    WHERE UC.ID = #{userId} <![CDATA[ AND UC.USER_LVL <> -1 ]]> 
	</select>
	
	<select id="getUserNumber" resultType="long" parameterType="long">
		select count(*) from USER_CUSTOMER where
		instr(USER_CHAIN ,(select USER_CHAIN from USER_CUSTOMER where id=#{userId}))=1
	</select>
	
	<select id="getDirectSubUserNumber" resultType="long" parameterType="long">
		select count(*) from USER_CUSTOMER where (PARENT_ID=#{userId} or id=#{userId}) 
<!-- 		<if test="@Ognl@isNotEmpty(account)"> 点击查看下级按钮时，查询条件中无视用户名-->
<!-- 		and account like  #{account}||'%'  -->
<!-- 		 </if> -->
	</select>
	
	<select id="queryUserIncomes" resultMap="userCenterReport"
		parameterType="hashMap">
		SELECT A.user_id AS userId ,
			A.bet         AS totalSubuserSaleroom,
			A.win         AS totalSubuserWins ,
			A.ret         AS totalSubuserPoint
		FROM
			(SELECT 
			  user_id AS user_id,
			  decode(SUM(gor.total_amount),null,0,SUM(gor.total_amount)) AS bet,
		      decode(SUM(gor.total_win),null,0,SUM(gor.total_win))       AS win,
		      decode(SUM(gor.total_ret),null,0,SUM(gor.total_ret))       AS ret
			FROM
			game_order_report gor
		WHERE user_id = (select id from user_customer where
		account=#{account})
		  <choose>
	        <when test="@Ognl@isNotEmpty(startTime)">
	         	<![CDATA[
					and trunc(create_time) = trunc(#{startTime})
				]]>
	        </when>
	        <otherwise>
	        	<![CDATA[
					and trunc(create_time) > trunc(SYSDATE-1)
				]]>
	        </otherwise>
	     </choose>
		and trunc(create_time) > trunc(SYSDATE-7)
		<if test="@Ognl@isNotEmpty(lotteryId)">
			and (LOTTERYID = #{lotteryId} or LOTTERYID is null)
		</if>
		GROUP BY user_id
		) A,
		user_customer u
		WHERE A.user_id = u.id
				
	</select>
	
	<select id="getUserReportByBetTypeCodeCount" parameterType="HashMap" resultType="long" flushCache="false">
		SELECT
		  COUNT(*)
		FROM (
		  select
		    SUM(NVL(B.total_amount,0)) AS V1,
		    SUM(NVL(B.total_win,0)) AS V2,
		    SUM(NVL(B.total_ret,0)) AS V3,
		    SUM(NVL(C.AMOUNT,0)) AS V4,
		    A.U_ID V5
		  from USER_CUSTOMER_FOR_REPORT_TEMP A 
		  left join GAME_ORDER_REPORT B on B.USER_ID = A.O_ID 
		  and 
			<choose>
				<when test="@Ognl@isNotEmpty(startTime)">
				<![CDATA[ B.CREATE_TIME >= TRUNC(#{startTime}) and B.CREATE_TIME < TRUNC(#{startTime})+1 ]]>
			</when>
			<otherwise>
				<![CDATA[ B.CREATE_TIME > TRUNC(SYSDATE-1) ]]>
			</otherwise>
			</choose>
			and B.CREATE_TIME > TRUNC(SYSDATE-7) 
			
      		and B.BET_TYPE_CODE IN (
		    SELECT btc.BET_TYPE_CODE from(
		      select GS.LOTTERY_SERIES_CODE AS gameTypeId,GBS.LOTTERYID,
		        (CASE WHEN GS.LOTTERY_SERIES_CODE =1 AND GBS.GAME_GROUP_CODE NOT IN (47,48,50)  THEN 2 
		            WHEN GS.LOTTERY_SERIES_CODE =1 AND GBS.GAME_GROUP_CODE IN (47,48,50)  THEN 3
		              ELSE 1 
		         END) As gamePlayTypeId,GBS.GAME_GROUP_CODE,GBS.GAME_SET_CODE,GBS.BET_METHOD_CODE,GBS.BET_TYPE_CODE
		    FROM GAME_BETTYPE_STATUS GBS LEFT JOIN GAME_SERIES GS on GS.LOTTERYID = GBS.LOTTERYID 
		    WHERE GBS.STATUS =1 
		    <if test="@Ognl@isNotEmpty(lotteryId)">
				AND	GBS.LOTTERYID = #{lotteryId}
			</if>
			<if test="@Ognl@isNotEmpty(GAME_GROUP_CODE)">
				AND GBS.GAME_GROUP_CODE = #{GAME_GROUP_CODE}
			</if>
			<if test="@Ognl@isNotEmpty(GAME_SET_CODE)">
				AND GBS.GAME_SET_CODE = #{GAME_SET_CODE}
			</if>
			<if test="@Ognl@isNotEmpty(BET_METHOD_CODE)">
				AND GBS.BET_METHOD_CODE = #{BET_METHOD_CODE}
			</if>
		    ) btc    
		    <where>
			 	<if test="@Ognl@isNotEmpty(gamePlayTypeId)">
		 			btc.gamePlayTypeId = #{gamePlayTypeId}
				</if>
			 </where>
		    GROUP BY btc.BET_TYPE_CODE
		  )
      
		  left join USER_ACTIVITY_GIFTS C on A.O_ID = C.USER_ID 
		  and 
			<choose>
				<when test="@Ognl@isNotEmpty(startTime)">
			<![CDATA[ C.CREATE_TIME >= TRUNC(#{startTime}) and C.CREATE_TIME < TRUNC(#{startTime})+1 ]]>
			</when>
			<otherwise>
				<![CDATA[ C.CREATE_TIME > TRUNC(SYSDATE-1) ]]>
				</otherwise>
			</choose>
			and C.CREATE_TIME > TRUNC(SYSDATE-7) 
		  
		  group by A.U_ID
		) REPORT JOIN USER_CUSTOMER UC ON REPORT.V5 = UC.ID
		WHERE
		<choose>
			<!-- 查詢下一級 -->
			<when test="@Ognl@isNotEmpty(parentId)">
				UC.PARENT_ID = #{parentId} OR UC.ID = #{parentId}
			</when>
			<when test="@Ognl@isNotEmpty(account)">
				UC.ACCOUNT = #{account}
			</when>
			<!-- 查詢使用者報表 -->
			<otherwise>
				UC.ID = #{userId} <![CDATA[ AND UC.USER_LVL <> -1 ]]> 
			</otherwise>
		</choose>
	</select>
	
	<select id="getUserReportByBetTypeCodeList" resultMap="userCenterReport" parameterType="hashmap">
		SELECT
		  UC.ID as userId,
		  UC.ACCOUNT as account,
		  UC.USER_LVL as userLvl,
		  UC.USER_CHAIN as userChain,
		  REPORT.V1 as totalSubuserSaleroom,
		  REPORT.V2 as totalSubuserWins,
		  REPORT.V3 as totalSubuserPoint,
		  (select 
		  	NVL(SUM(uag.AMOUNT),0) 
		  from USER_ACTIVITY_GIFTS uag 
		  join USER_CUSTOMER_FOR_REPORT_TEMP ucfrt on ucfrt.O_ID = uag.USER_ID 
		  
		  where 
			<choose>
				<when test="@Ognl@isNotEmpty(startTime)">
			<![CDATA[ uag.CREATE_TIME >= TRUNC(#{startTime}) and uag.CREATE_TIME < TRUNC(#{startTime})+1 ]]>
			</when>
			<otherwise>
				<![CDATA[ uag.CREATE_TIME >= TRUNC(SYSDATE-1) ]]>
				</otherwise>
			</choose>
			<if test="@Ognl@isNotEmpty(lev)">
		  		and ucfrt.LEV = 1
		  	</if>
			and uag.CREATE_TIME >= TRUNC(SYSDATE-6) 
		    and ucfrt.U_ID = UC.ID
		  ) as activityGifts,
		  
		  (CASE WHEN (select count(*) from USER_CUSTOMER where PARENT_ID = UC.ID) > 0 THEN 1 ELSE 0 END) as hasNextUser
		FROM (
		  select
		    SUM(NVL(B.total_amount,0)) AS V1,
		    SUM(NVL(B.total_win,0)) AS V2,
		    SUM(NVL(B.total_ret,0)) AS V3,
		    A.U_ID V5
		  from USER_CUSTOMER_FOR_REPORT_TEMP A 
		  left join GAME_ORDER_REPORT B on B.USER_ID = A.O_ID 
		  and 
			<choose>
				<when test="@Ognl@isNotEmpty(startTime)">
				<![CDATA[ B.CREATE_TIME >= TRUNC(#{startTime}) and B.CREATE_TIME < TRUNC(#{startTime})+1 ]]>
			</when>
			<otherwise>
				<![CDATA[ B.CREATE_TIME >= TRUNC(SYSDATE) ]]>
			</otherwise>
			</choose>
			and B.CREATE_TIME >= TRUNC(SYSDATE-6) 
			
      		and B.BET_TYPE_CODE IN (
		    SELECT btc.BET_TYPE_CODE from(
		      select GS.LOTTERY_SERIES_CODE AS gameTypeId,GBS.LOTTERYID,
		        (CASE WHEN GS.LOTTERY_SERIES_CODE =1 AND GBS.GAME_GROUP_CODE NOT IN (47,48,50,51,52)  THEN 2 
		            WHEN GS.LOTTERY_SERIES_CODE =1 AND GBS.GAME_GROUP_CODE IN (47,48,50,51,52)  THEN 3
		              ELSE 1 
		         END) As gamePlayTypeId,GBS.GAME_GROUP_CODE,GBS.GAME_SET_CODE,GBS.BET_METHOD_CODE,GBS.BET_TYPE_CODE
		    FROM GAME_BETTYPE_STATUS GBS LEFT JOIN GAME_SERIES GS on GS.LOTTERYID = GBS.LOTTERYID 
		    WHERE GBS.STATUS =1 
		    <if test="@Ognl@isNotEmpty(lotteryId)">
				AND	GBS.LOTTERYID = #{lotteryId}
			</if>
			<if test="@Ognl@isNotEmpty(GAME_GROUP_CODE)">
				AND GBS.GAME_GROUP_CODE = #{GAME_GROUP_CODE}
			</if>
			<if test="@Ognl@isNotEmpty(GAME_SET_CODE)">
				AND GBS.GAME_SET_CODE = #{GAME_SET_CODE}
			</if>
			<if test="@Ognl@isNotEmpty(BET_METHOD_CODE)">
				AND GBS.BET_METHOD_CODE = #{BET_METHOD_CODE}
			</if>
		    ) btc    
		    <where>
			 	<if test="@Ognl@isNotEmpty(gamePlayTypeId)">
		 			btc.gamePlayTypeId = #{gamePlayTypeId}
				</if>
			 </where>
		    GROUP BY btc.BET_TYPE_CODE
		  )
      		<where>
			 	<if test="@Ognl@isNotEmpty(lotteryId)">
					and B.LOTTERYID = #{lotteryId}
				</if>
				<if test="@Ognl@isNotEmpty(lev)">
			  		and A.LEV = 1
			  	</if>
			</where>
		  group by A.U_ID
		) REPORT JOIN USER_CUSTOMER UC ON REPORT.V5 = UC.ID
		WHERE
		<choose>
			<!-- 查詢下一級 -->
			<when test="@Ognl@isNotEmpty(parentId)">
				UC.PARENT_ID = #{parentId} OR UC.ID = #{parentId}
			</when>
			<when test="@Ognl@isNotEmpty(account)">
				UC.ACCOUNT = #{account}
			</when>
			<!-- 查詢使用者報表 -->
			<otherwise>
				UC.ID = #{userId} <![CDATA[ AND UC.USER_LVL <> -1 ]]> 
			</otherwise>
		</choose>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	
	<select id="getUserChainByAccountInList" parameterType="list" resultMap="userCenterReport" flushCache="false">
		SELECT 
			ID as userId,
			ACCOUNT as account
		FROM USER_CUSTOMER 
		WHERE ACCOUNT in (${account}) 
		ORDER BY (CASE WHEN USER_LVL >= 0 THEN 0 ELSE 1 END), USER_LVL
	</select>
	
	<!-- 2016.05.10 DavidWu Add : #7332 4.0前台代理报表查询 新增查询功能 玩法 分類 -新版前台盈虧報表查詢 
	 	 gamePlayTypeId:1 ,gamePlayTypeTitle:'所有玩法' 
	 	 gamePlayTypeId:2 ,gamePlayTypeTitle:'普通玩法' 
	 	 gamePlayTypeId:3 ,gamePlayTypeTitle:'超级2000' 
	 	  時時彩系列分為 '普通玩法' & '超级2000' 
	 	  所有彩種階有 '所有玩法'
	 -->
	<select id="queryUserCenterReportTotalByConditionAndBetTypeCode" resultMap="userCenterReport"
		parameterType="hashmap">
		
		SELECT 
			uc.account as account,
			uc.user_lvl as userLvl,
			uc.user_chain as userChain,
			uc.id as userId,
			NVL(SUM(gor.total_amount),0) AS totalSubuserSaleroom,
			NVL(SUM(gor.total_win),0) AS totalSubuserWins,
			NVL(SUM(gor.total_ret),0) AS totalSubuserPoint,
			
			
			(select
			  (CASE WHEN SUM(CT_BAL-BEFOR_BAL) IS NULL THEN 0 ELSE SUM(CT_BAL-BEFOR_BAL) END)
				from FUND_CHANGE_LOG
				where SUBSTR(REASON,4,4) = 'PGXX' 
	      		<choose>
		        	<when test="@Ognl@isNotEmpty(startTime)">
		         		<![CDATA[ and GMT_CREATED >= TRUNC(#{startTime}) 
								  and GMT_CREATED < TRUNC(#{startTime})+1 ]]>
		        	</when>
		        	<otherwise>
		        		<![CDATA[ and GMT_CREATED > TRUNC(SYSDATE-1) ]]>
		        	</otherwise>
		     	</choose>
				<![CDATA[ and GMT_CREATED > TRUNC(SYSDATE-7) ]]>
				and USER_ID in (SELECT id FROM USER_CUSTOMER CONNECT BY PRIOR id = parent_id START WITH id = uc.id)) as activityGifts
			
			
			
		FROM USER_CUSTOMER uc
		LEFT JOIN USER_CUSTOMER suc on suc.USER_CHAIN like (uc.USER_CHAIN || '%')
		LEFT JOIN GAME_ORDER_REPORT GOR on GOR.USER_ID = suc.ID 
			 <choose>
	        	<when test="@Ognl@isNotEmpty(startTime)">
	         		<![CDATA[ AND TRUNC(create_time) = TRUNC(#{startTime}) ]]>
	        	</when>
	        	<otherwise>
	        		<![CDATA[ AND TRUNC(create_time) > TRUNC(SYSDATE-1) ]]>
	        	</otherwise>
	     	</choose>
			AND TRUNC(GOR.create_time) > TRUNC(SYSDATE-7) 
			<if test="@Ognl@isNotEmpty(lotteryId)">
				AND (LOTTERYID = #{lotteryId} or LOTTERYID is null)			
			</if>
			 	AND GOR.BET_TYPE_CODE IN (
						SELECT btc.BET_TYPE_CODE from( select GS.LOTTERY_SERIES_CODE AS gameTypeId,GBS.LOTTERYID,
								(CASE WHEN GS.LOTTERY_SERIES_CODE =1 AND GBS.GAME_GROUP_CODE NOT IN (47,48,50)  THEN 2 
									  WHEN GS.LOTTERY_SERIES_CODE =1 AND GBS.GAME_GROUP_CODE IN (47,48,50)  THEN 3
								      ELSE 1 
								 END) As gamePlayTypeId,GBS.GAME_GROUP_CODE,GBS.GAME_SET_CODE,GBS.BET_METHOD_CODE,GBS.BET_TYPE_CODE
						FROM GAME_BETTYPE_STATUS GBS LEFT JOIN GAME_SERIES GS on GS.LOTTERYID = GBS.LOTTERYID 
						WHERE GBS.STATUS =1 
						<if test="@Ognl@isNotEmpty(lotteryId)">
							AND	  GBS.LOTTERYID = #{lotteryId}
						</if>
						<if test="@Ognl@isNotEmpty(GAME_GROUP_CODE)">
							AND GBS.GAME_GROUP_CODE = #{GAME_GROUP_CODE}
						</if>
						<if test="@Ognl@isNotEmpty(GAME_SET_CODE)">
							AND GBS.GAME_SET_CODE = #{GAME_SET_CODE}
						</if>
						<if test="@Ognl@isNotEmpty(BET_METHOD_CODE)">
							AND GBS.BET_METHOD_CODE = #{BET_METHOD_CODE}
						</if>
						) btc    
						 <where>
						 	<if test="@Ognl@isNotEmpty(gamePlayTypeId)">
					 			btc.gamePlayTypeId = #{gamePlayTypeId}
							</if>
						 </where>
					 	
						GROUP BY btc.BET_TYPE_CODE
					)
			
		WHERE 
		<choose>
			<!-- 查詢下一級 -->
			<when test="@Ognl@isNotEmpty(parentId)">
				(uc.id = #{userId} OR uc.PARENT_ID = #{userId})
			</when>
			<when test="@Ognl@isNotEmpty(account)">
				uc.account=#{account}
				AND instr(uc.USER_CHAIN,(select USER_CHAIN from USER_CUSTOMER where id=#{userId}))=1
			</when>
			<!-- 查詢使用者報表 -->
			<otherwise>
				uc.id = #{userId}
				<![CDATA[ AND uc.user_lvl <> -1 ]]> 
			</otherwise>
		</choose>
		
<!-- 		<if test="@Ognl@isNotEmpty(account)"> -->
<!-- 			AND uc.account=#{account} -->
<!-- 		</if>		 -->
		GROUP by uc.account,uc.user_lvl,uc.user_chain,uc.id
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	
	<!-- 前台盈虧報表查詢 -->
	<select id="queryUserCenterReportTotalByCondition" resultMap="userCenterReport"
		parameterType="hashmap">
		
		SELECT 
		  A.bet         AS totalSubuserSaleroom,
		  A.win         AS totalSubuserWins ,
		  A.ret         AS totalSubuserPoint
		FROM
		  (SELECT 
		  	decode(SUM(gor.total_amount),null,0,SUM(gor.total_amount)) AS bet,
		    decode(SUM(gor.total_win),null,0,SUM(gor.total_win))       AS win,
		    decode(SUM(gor.total_ret),null,0,SUM(gor.total_ret))       AS ret
		  FROM GAME_ORDER_REPORT GOR
		  WHERE USER_ID IN
		    (SELECT ID
		    FROM USER_CUSTOMER
		    WHERE USER_CHAIN LIKE
		      ( SELECT USER_CHAIN||'%' FROM USER_CUSTOMER WHERE account = #{account}
		      )
		    )
		  <choose>
	        <when test="@Ognl@isNotEmpty(startTime)">
	         	<![CDATA[
					and trunc(create_time) = trunc(#{startTime})
				]]>
	        </when>
	        <otherwise>
	        	<![CDATA[
					and trunc(create_time) > trunc(SYSDATE-1)
				]]>
	        </otherwise>
	     </choose>
		and trunc(create_time) > trunc(SYSDATE-7)
		<if test="@Ognl@isNotEmpty(lotteryId)">
			and (LOTTERYID = #{lotteryId} or LOTTERYID is null)
		</if>
		)A
		LEFT JOIN USER_CUSTOMER UC
		ON UC.ACCOUNT          = #{account}
	</select>
	
	<!-- 查詢由于该sql嵌套查询性能问题，导致报表查询超时 bug2081，现拆分该sql，汇总值放上面sql查询 -->
	<select id="queryUserCenterReportByCondition" resultMap="userCenterReport"
		parameterType="hashmap">
		select account as account,user_lvl as userLvl,user_chain as userChain,id as userId
		from USER_CUSTOMER uc
		where instr(uc.USER_CHAIN,(select USER_CHAIN from USER_CUSTOMER where id=#{userId}))=1 
		<!-- 修改0004591: 前台报表查询问题 问题 -->
		<![CDATA[ and uc.user_lvl <> -1 ]]> 
		<if test="@Ognl@isNotEmpty(account)">
		and uc.account=#{account}
		</if>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	
	<select id="getUserNumberByCondition" resultType="long"
		parameterType="hashMap">
		select
		count(*)
		from USER_CUSTOMER where USER_CHAIN like (select USER_CHAIN from USER_CUSTOMER where id=#{userId})||'%'
		<if test="@Ognl@isNotEmpty(account)">
		   and account=#{account} 
		</if>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	
	<select id="queryUserAndSubUserList" resultMap="UserCustomerResult"
		parameterType="HashMap">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER
		where
		USER_CHAIN like (select USER_CHAIN from USER_CUSTOMER t where t.id = #{id})||'%'
	</select>

	<select id="getCountByCustomerList" resultType="long"
		parameterType="HashMap">
		select count(*) counts from USER_CUSTOMER
		<include refid="queryDynamicWhere" />
	</select>
	
	<sql id="queryDynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(account)">
				<if test="@Ognl@isEmpty(isAccountMatch)">
					and ACCOUNT = #{account}
				</if>
				<if test="@Ognl@isNotEmpty(isAccountMatch)">
					and ACCOUNT like '%'||#{account}||'%'
				</if>
			</if>
			<if test="@Ognl@isNotEmpty(isFreeze)">
				and IS_FREEZE=#{isFreeze}
			</if>
			<if test="@Ognl@isNotEmpty(email)">
				and EMAIL = #{email}
			</if>
			<if test="@Ognl@isNotEmpty(userLvl)">
				and USER_LVL = #{userLvl}
			</if>
			<if test="@Ognl@isNotEmpty(fromDate)">
			<![CDATA[
				and REGISTER_DATE >= #{fromDate}
				]]>
			</if>
			<if test="@Ognl@isNotEmpty(toDate)">
			<![CDATA[
				and REGISTER_DATE <= #{toDate}
				]]>
			</if>
			<if test="@Ognl@isNotEmpty(userChain)">
				and USER_CHAIN like '${userChain}%'
			</if>

			<if test="@Ognl@isNotEmpty(parentId)">
				and PARENT_ID = #{parentId}
			</if>

			<if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(fromLoginDate)">
			<![CDATA[
				and LAST_LOGIN_DATE >= #{fromLoginDate}
				]]>
			</if>
			<if test="@Ognl@isNotEmpty(toLoginDate)">
			<![CDATA[
				and LAST_LOGIN_DATE <= #{toLoginDate}
				]]>
			</if>
			<if test="@Ognl@isNotEmpty(awardRetStatus)">
				and AWARD_RET_STATUS = #{awardRetStatus}
			</if>
		</where>
	</sql>
	
	<update id="updateUserFreeze" parameterType="HashMap">
		UPDATE USER_CUSTOMER
		<set>

			<if test="@Ognl@isNotEmpty(isFreeze)">
				IS_FREEZE = #{isFreeze} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeId)">
				freeze_id = #{freezeId} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeDate)">
				FREEZE_DATE = #{freezeDate} ,
			</if>
			<if test="@Ognl@isNotEmpty(unfreezeDate)">
				UNFREEZE_DATE = #{unfreezeDate} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezer)">
				FREEZER = #{freezer} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeMethod)">
				FREEZE_METHOD = #{freezeMethod} ,
			</if>
			<if test="@Ognl@isNotEmpty(freezeMemo)">
				FREEZE_MEMO = #{freezeMemo},
			</if>
			<if test="@Ognl@isNotEmpty(freezeAccount)">
				FREEZE_ACCOUNT = #{freezeAccount}
			</if>
		</set>
		where ID in
		<foreach collection="ids" index="index" item="user" open="("
			separator="," close=")">
			#{user}
		</foreach>
	</update>

	<select id="queryUserByIds" resultMap="UserCustomerResult">
		select
		<include refid="userCustomerColumns" />
		from USER_CUSTOMER
		where
		ID in
		<foreach item="ids" index="index" collection="array" open="("
			separator="," close=")">
			#{ids}
		</foreach>
	</select>


</mapper>
