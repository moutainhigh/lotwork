<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.user.dao.vo.UserMessageReply">
	<resultMap id="UserMessageReplyResult" type="com.winterframework.firefrog.user.dao.vo.UserMessageReply">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="userMessageReplyColumns">
	    <![CDATA[
	        	ID as id,
	        	ROOT_ID as rootId,
	        	CONTENT as content,
	        	SENDER as sender,
	        	SENDER_DATE as senderDate,
	        	PARENT_ID as parentId,
	        	RECEIVE as receive,
	        	SENDER_ACCOUNT as senderAccount,
	        	RECEIVE_ACCOUNT as receiveAccount
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.user.dao.vo.UserMessageReply"
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		<selectKey resultType="long" order="BEFORE" keyProperty="id">
			SELECT SEQ_USER_MESSAGE_REPLY_ID.Nextval from dual
		</selectKey>
	    <![CDATA[
	        INSERT INTO
	        USER_MESSAGE_REPLY (
	        	ID ,
	        	ROOT_ID ,
	        	CONTENT ,
	        	SENDER ,
	        	SENDER_DATE ,
	        	PARENT_ID ,
	        	RECEIVE ,
	        	SENDER_ACCOUNT ,
	        	RECEIVE_ACCOUNT 
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{rootId,javaType=long,jdbcType=DECIMAL} ,
	        	#{content,javaType=string,jdbcType=VARCHAR} ,
	        	#{sender,javaType=java.lang.Long,jdbcType=DECIMAL} ,
	        	#{senderDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{parentId,javaType=long,jdbcType=DECIMAL} ,
	        	#{receive,javaType=long,jdbcType=DECIMAL} ,
	        	#{senderAccount,javaType=string,jdbcType=VARCHAR} ,
	        	#{receiveAccount,javaType=string,jdbcType=VARCHAR} 
	        ) 
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.user.dao.vo.UserMessageReply">
	    <![CDATA[
	        UPDATE USER_MESSAGE_REPLY SET
		        ROOT_ID = #{rootId,javaType=long,jdbcType=DECIMAL} ,
		        CONTENT = #{content,javaType=string,jdbcType=VARCHAR} ,
		        SENDER = #{sender,javaType=long,jdbcType=DECIMAL} ,
		        SENDER_DATE = #{senderDate,javaType=object,jdbcType=TIMESTAMP} ,
		        PARENT_ID = #{parentId,javaType=long,jdbcType=DECIMAL} ,
		        RECEIVE = #{receive,javaType=long,jdbcType=DECIMAL} ,
		        SENDER_ACCOUNT = #{senderAccount,javaType=string,jdbcType=VARCHAR} ,
		        RECEIVE_ACCOUNT = #{receiveAccount,javaType=string,jdbcType=VARCHAR} 
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from USER_MESSAGE_REPLY where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="UserMessageReplyResult" flushCache="false">
			select <include refid="userMessageReplyColumns" />
		    <![CDATA[
			    from USER_MESSAGE_REPLY 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="UserMessageReplyResult" flushCache="false">
			select <include refid="userMessageReplyColumns" />
			    from USER_MESSAGE_REPLY 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
					#{item}				
				</foreach>					
		</select>	

	<sql id="userMessageReplyDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(rootId)">
				and ROOT_ID = #{rootId}
			</if>
	       <if test="@Ognl@isNotEmpty(content)">
				and CONTENT = #{content}
			</if>
	       <if test="@Ognl@isNotEmpty(sender)">
				and SENDER = #{sender}
			</if>
	       <if test="@Ognl@isNotEmpty(senderDate)">
				and SENDER_DATE = #{senderDate}
			</if>
	       <if test="@Ognl@isNotEmpty(parentId)">
				and PARENT_ID = #{parentId}
			</if>
	       <if test="@Ognl@isNotEmpty(receive)">
				and RECEIVE = #{receive}
			</if>
	       <if test="@Ognl@isNotEmpty(senderAccount)">
				and SENDER_ACCOUNT = #{senderAccount}
			</if>
	       <if test="@Ognl@isNotEmpty(receiveAccount)">
				and RECEIVE_ACCOUNT = #{receiveAccount}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="UserMessageReplyResult"  flushCache="false">
    	select <include refid="userMessageReplyColumns" />
	    from USER_MESSAGE_REPLY 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from USER_MESSAGE_REPLY 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from USER_MESSAGE_REPLY 
		<include refid="userMessageReplyDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="UserMessageReplyResult">
    	select <include refid="userMessageReplyColumns" />
	    from USER_MESSAGE_REPLY 
		<include refid="userMessageReplyDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<!-- 根据主题id查询回复消息 -->
	<select id="getByRootId" parameterType="long" resultMap="UserMessageReplyResult"
		flushCache="false">
		select
		<include refid="userMessageReplyColumns" />
		    <![CDATA[
			    from USER_MESSAGE_REPLY 
		        where 
		        ROOT_ID = #{rootId}
		    ]]>
		    
			ORDER BY SENDER_DATE
			
	</select>
	
	<!-- 根据parentId取回复消息id -->
	<select id="getIdByParentId" parameterType="long" resultType="long">
		select id from (select id from user_message_reply where parent_id = #{parentId} order by id desc) where rownum = 1
	</select>
</mapper>
