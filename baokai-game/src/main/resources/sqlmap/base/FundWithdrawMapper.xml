<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.fund.dao.vo.FundWithdraw">
	<resultMap id="FundWithdrawResult" type="com.winterframework.firefrog.fund.dao.vo.FundWithdraw">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="fundWithdrawColumns">
	    <![CDATA[
	        	ID as id,
	        	USER_ID as userId,
	        	APPLY_TIME as applyTime,
	        	WITHDRAW_AMT as withdrawAmt,
	        	APPR_ACCOUNT as apprAccount,
	        	APPR_TIME as apprTime,
	        	MC_REMIT_TIME as mcRemitTime,
	        	STATUS as status,
	        	SN as sn,
	        	IP_ADDR as ipAddr,
	        	APPROVE_MEMO as approveMemo,
	        	USER_BANK_STRUC as userBankStruc,
	        	APPLY_EXPIRE_TIME as applyExpireTime,
	        	MEMO as memo,
	        	MC_NOTICE_TIME as mcNoticeTime,
	        	FUND_FREEZE_ID as fundFreezeId,
	        	APPLY_ACCOUNT as applyAccount,
	        	APPR2_ACCT as appr2Acct,
	        	APPR2_TIME as appr2Time
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.fund.dao.vo.FundWithdraw" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		 
		 <selectKey resultType="long" order="BEFORE" keyProperty="id">
			SELECT SEQ_FUND_WITHDRAW_ID.Nextval from dual
		</selectKey>
		 
	    <![CDATA[
	        INSERT INTO
	        FUND_WITHDRAW (
	        	ID ,
	        	USER_ID ,
	        	APPLY_TIME ,
	        	WITHDRAW_AMT ,
	        	APPR_ACCOUNT ,
	        	APPR_TIME ,
	        	MC_REMIT_TIME ,
	        	STATUS ,
	        	SN ,
	        	IP_ADDR ,
	        	APPROVE_MEMO ,
	        	USER_BANK_STRUC ,
	        	APPLY_EXPIRE_TIME ,
	        	MEMO ,
	        	MC_NOTICE_TIME ,
	        	FUND_FREEZE_ID ,
	        	APPLY_ACCOUNT,
	        	APPR2_ACCT,
	        	APPR2_TIME
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{applyTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{withdrawAmt,javaType=long,jdbcType=DECIMAL} ,
	        	#{apprAccount,javaType=long,jdbcType=DECIMAL} ,
	        	#{apprTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{mcRemitTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{status,javaType=long,jdbcType=DECIMAL} ,
	        	#{sn,javaType=string,jdbcType=VARCHAR} ,
	        	#{ipAddr,javaType=long,jdbcType=DECIMAL} ,
	        	#{approveMemo,javaType=string,jdbcType=VARCHAR} ,
	        	#{userBankStruc,javaType=string,jdbcType=VARCHAR} ,
	        	#{applyExpireTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{memo,javaType=string,jdbcType=VARCHAR} ,
	        	#{mcSn,javaType=long,jdbcType=DECIMAL} ,
	        	#{mcNoticeTime,javaType=long,jdbcType=DECIMAL} ,
	        	#{mcFee,javaType=long,jdbcType=DECIMAL} ,
	        	#{mcMemo,javaType=string,jdbcType=VARCHAR} ,
	        	#{fundFreezeId,javaType=long,jdbcType=DECIMAL} ,
	        	#{applyAccount,javaType=string,jdbcType=VARCHAR},
	        	#{appr2Acct,javaType=string,jdbcType=VARCHAR},
	        	#{appr2Time,javaType=date,jdbcType=TIMESTAMP}
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.fund.dao.vo.FundWithdraw">
	    <![CDATA[
	        UPDATE FUND_WITHDRAW SET
		        USER_ID = #{userId,javaType=long,jdbcType=DECIMAL} ,
		        APPLY_TIME = #{applyTime,javaType=date,jdbcType=TIMESTAMP} ,
		        WITHDRAW_AMT = #{withdrawAmt,javaType=long,jdbcType=DECIMAL} ,
		        APPR_ACCOUNT = #{apprAccount,javaType=long,jdbcType=DECIMAL} ,
		        APPR_TIME = #{apprTime,javaType=date,jdbcType=TIMESTAMP} ,
		        MC_REMIT_TIME = #{mcRemitTime,javaType=date,jdbcType=TIMESTAMP} ,
		        STATUS = #{status,javaType=long,jdbcType=DECIMAL} ,
		        SN = #{sn,javaType=string,jdbcType=VARCHAR} ,
		        IP_ADDR = #{ipAddr,javaType=long,jdbcType=DECIMAL} ,
		        APPROVE_MEMO = #{approveMemo,javaType=string,jdbcType=VARCHAR} ,
		        USER_BANK_STRUC = #{userBankStruc,javaType=string,jdbcType=VARCHAR} ,
		        APPLY_EXPIRE_TIME = #{applyExpireTime,javaType=date,jdbcType=TIMESTAMP} ,
		        MEMO = #{memo,javaType=string,jdbcType=VARCHAR} ,
		        MC_SN = #{mcSn,javaType=long,jdbcType=DECIMAL} ,
		        MC_NOTICE_TIME = #{mcNoticeTime,javaType=long,jdbcType=DECIMAL} ,
		        MC_FEE = #{mcFee,javaType=long,jdbcType=DECIMAL} ,
		        MC_MEMO = #{mcMemo,javaType=string,jdbcType=VARCHAR} ,
		        FUND_FREEZE_ID = #{fundFreezeId,javaType=long,jdbcType=DECIMAL} ,
		        APPLY_ACCOUNT = #{applyAccount,javaType=string,jdbcType=VARCHAR},
		        APPR2_ACCT = #{appr2Acct,javaType=string,jdbcType=VARCHAR},
	        	APPR2_TIME = #{appr2Time,javaType=date,jdbcType=TIMESTAMP}
		        
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
		
		<update id="updateFundWithdrawAudit" parameterType="HashMap">
			 UPDATE FUND_WITHDRAW
			 <set>
			 	<if test="@Ognl@isNotEmpty(approverId)">
			 		APPR_ACCOUNT = #{apprAccount,javaType=long,jdbcType=DECIMAL} ,
			 	</if>
			 	<if test="@Ognl@isNotEmpty(approveTime)">
			 		APPR_TIME = #{apprTime,javaType=date,jdbcType=TIMESTAMP} ,
			 	</if>
			 	<if test="@Ognl@isNotEmpty(approveMemo)">
			 		APPROVE_MEMO = #{approveMemo,javaType=string,jdbcType=VARCHAR} ,
			 	</if>
			 	<if test="@Ognl@isNotEmpty(appr2Acct)">
			 		  APPR2_ACCT = #{appr2Acct,javaType=string,jdbcType=VARCHAR} ,
			 	</if>
			 	<if test="@Ognl@isNotEmpty(mcMemo)">
			 		MC_MEMO = #{mcMemo,javaType=string,jdbcType=VARCHAR},
			 	</if>
			 	<if test="@Ognl@isNotEmpty(mcFee)">
			 		MC_FEE = #{mcFee,javaType=long,jdbcType=DECIMAL} ,
			 	</if>
			 	<if test="@Ognl@isNotEmpty(status)">
			 		 STATUS = #{status,javaType=long,jdbcType=DECIMAL} 
			 	</if>
			 </set>
			 WHERE 
			 	ID = #{id}
		</update>

		<update id="updateRemark" parameterType="HashMap">
			 UPDATE FUND_WITHDRAW
			 <set>
			 	<if test="@Ognl@isNotEmpty(memo)">
			 		MEMO = #{memo,javaType=string,jdbcType=VARCHAR}
			 	</if>
			 </set>
			 WHERE 
			 	ID = #{id}
		</update>
		
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from FUND_WITHDRAW where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="FundWithdrawResult" flushCache="false">
			select <include refid="fundWithdrawColumns" />
		    <![CDATA[
			    from FUND_WITHDRAW 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="FundWithdrawResult" flushCache="false">
			select <include refid="fundWithdrawColumns" />
			    from FUND_WITHDRAW 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
					#{item}	
				</foreach>					
		</select>	

	<sql id="fundWithdrawDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(applyTime)">
				and APPLY_TIME = #{applyTime}
			</if>
	       <if test="@Ognl@isNotEmpty(withdrawAmt)">
				and WITHDRAW_AMT = #{withdrawAmt}
			</if>
	       <if test="@Ognl@isNotEmpty(apprAccount)">
				and APPR_ACCOUNT = #{apprAccount}
			</if>
	       <if test="@Ognl@isNotEmpty(apprTime)">
				and APPR_TIME = #{apprTime}
			</if>
	       <if test="@Ognl@isNotEmpty(mcRemitTime)">
				and MC_REMIT_TIME = #{mcRemitTime}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and STATUS in
		       	<foreach item="status" index="index" collection="status" open="(" separator="," close=")">
		       		#{status}
		       	</foreach>

			</if>
	       <if test="@Ognl@isNotEmpty(sn)">
				and SN = #{sn}
			</if>
	       <if test="@Ognl@isNotEmpty(ipAddr)">
				and IP_ADDR = #{ipAddr}
			</if>
	       <if test="@Ognl@isNotEmpty(approveMemo)">
				and APPROVE_MEMO = #{approveMemo}
			</if>
	       <if test="@Ognl@isNotEmpty(userBank struc)">
				and USER_BANK_STRUC = #{userBankStruc}
			</if>
	       <if test="@Ognl@isNotEmpty(applyExpireTime)">
				and APPLY_EXPIRE_TIME = #{applyExpireTime}
			</if>
	       <if test="@Ognl@isNotEmpty(memo)">
				and MEMO = #{memo}
			</if>
	       <if test="@Ognl@isNotEmpty(mcSn)">
				and MC_SN = #{mcSn}
			</if>
	       <if test="@Ognl@isNotEmpty(mcNoticeTime)">
				and MC_NOTICE_TIME = #{mcNoticeTime}
			</if>
	       <if test="@Ognl@isNotEmpty(mcFee)">
				and MC_FEE = #{mcFee}
			</if>
	       <if test="@Ognl@isNotEmpty(mcMemo)">
				and MC_MEMO = #{mcMemo}
			</if>
	       <if test="@Ognl@isNotEmpty(fundFreezeId)">
				and FUND_FREEZE_ID = #{fundFreezeId}
			</if>
			<if test="@Ognl@isNotEmpty(applyAccount)">
				and APPLY_ACCOUNT = #{applyAccount}
			</if>
			<if test="@Ognl@isNotEmpty(applyAccount)">
				and APPR2_ACCT = #{appr2Acct}
			</if>
			<if test="@Ognl@isNotEmpty(applyAccount)">
				and APPR2_TIME = #{appr2Time}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="FundWithdrawResult"  flushCache="false">
    	select <include refid="fundWithdrawColumns" />
	    from FUND_WITHDRAW 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from FUND_WITHDRAW 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from FUND_WITHDRAW 
		<include refid="fundWithdrawDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="FundWithdrawResult">
    	select <include refid="fundWithdrawColumns" />
	    from FUND_WITHDRAW 
		<include refid="fundWithdrawDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
	<select id="queryFundWithdrawByMowNum" resultMap="FundWithdrawResult">
		select <include refid="fundWithdrawColumns" />
	    from FUND_WITHDRAW 
	    WHERE SN = #{sn} and MC_SN = #{mcSn}
	</select>
	
	<select id="getCountByFundWithdrawList" resultType="long" parameterType="HashMap">
		 select count(*) from FUND_WITHDRAW
		 <where>
		  <if test="@Ognl@isNotEmpty(fromDate)">
		  	<![CDATA[
		    	and APPLY_TIME >= #{fromDate}
		    ]]>
		  </if>
		  <if test="@Ognl@isNotEmpty(toDate)">
		  	<![CDATA[
		  		and APPLY_TIME <= #{toDate}
		  	]]>
		  </if>
		  <if test="@Ognl@isNotEmpty(sn)">
		  		and SN = #{sn}
		  </if>
		</where>
	</select>
	
	<select id="queryFundWithdrawList" resultMap="FundWithdrawResult" parameterType="HashMap">
		 select <include refid="fundWithdrawColumns" />
	    from FUND_WITHDRAW 
	    <where>
		  <if test="@Ognl@isNotEmpty(fromDate)">
		  	<![CDATA[
		    	and APPLY_TIME >= #{fromDate}
		    ]]>
		  </if>
		  <if test="@Ognl@isNotEmpty(toDate)">
		  	<![CDATA[
		  		and APPLY_TIME <= #{toDate}
		  	]]>
		  </if>
		  <if test="@Ognl@isNotEmpty(sn)">
		  		and SN = #{sn}
		  </if>
		  <if test="@Ognl@isNotEmpty(status)">
				and STATUS in
		       	<foreach item="status" index="index" collection="status" open="(" separator="," close=")">
		       		#{status}
		       	</foreach>

			</if>
		</where>
	</select>
	<sql id="queryFundWithDynamicWhere">
		<where>
		  <if test="@Ognl@isEmpty(fromDate)">
		  	<![CDATA[
		    	and APPLY_TIME >= #{fromDate}
		    ]]>
		  </if>
		  <if test="@Ognl@isEmpty(toDate)">
		  	<![CDATA[
		  		and APPLY_TIME <= #{toDate}
		  	]]>
		  </if>
		  <if test="@Ognl@isEmpty(sn)">
		  		and SN = #{sn}
		  </if>
		  <if test="@Ognl@isNotEmpty(status)">
				and STATUS in
		       	<foreach item="status" index="index" collection="status" open="(" separator="," close=")">
		       		#{status}
		       	</foreach>

			</if>
		</where>
	</sql>
</mapper>
