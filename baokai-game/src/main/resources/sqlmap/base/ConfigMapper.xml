<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.common.config.dao.vo.Config">
	<resultMap id="ConfigResult" type="com.winterframework.firefrog.common.config.dao.vo.Config">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="configColumns">
	    <![CDATA[
	        	ID as id,
	        	MODULE as module,
	        	KEY as key,
	        	VALUE as value,
	        	TYPE as type,
	        	GMT_CREATED as gmtCreated,
	        	CREATOR as creator,
	        	MODIFIER as modifier,
	        	GMT_MODIFIED as gmtModified,
	        	MEMO as memo,
	        	DEFAULT_VALUE as defaultValue,
	        	FUNCTIOND as function
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.common.config.dao.vo.Config" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		   	     	<selectKey resultType="long" order="BEFORE" keyProperty="id">
						     SELECT   SEQ_CONFIG_ID.Nextval from dual
			   	    </selectKey>
			   	    
	    <![CDATA[
	        INSERT INTO
	        CONFIG (
	        	ID ,
	        	MODULE ,
	        	KEY ,
	        	VALUE ,
	        	TYPE ,
	        	GMT_CREATED ,
	        	CREATOR ,
	        	MODIFIER ,
	        	GMT_MODIFIED ,
	        	MEMO ,
	        	DEFAULT_VALUE,
	        	FUNCTION
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{module,javaType=string,jdbcType=VARCHAR} ,
	        	#{key,javaType=string,jdbcType=VARCHAR} ,
	        	#{value,javaType=string,jdbcType=VARCHAR} ,
	        	#{type,javaType=long,jdbcType=DECIMAL} ,
	        	#{gmtCreated,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{creator,javaType=long,jdbcType=DECIMAL} ,
	        	#{modifier,javaType=long,jdbcType=DECIMAL} ,
	        	#{gmtModified,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{memo,javaType=string,jdbcType=VARCHAR} ,
	        	#{defaultValue,javaType=string,jdbcType=VARCHAR},
	        	#{function,javaType=string,jdbcType=VARCHAR} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.common.config.dao.vo.Config">
	    <![CDATA[
	        UPDATE CONFIG SET
		        MODULE = #{module,javaType=string,jdbcType=VARCHAR} ,
		        KEY = #{key,javaType=string,jdbcType=VARCHAR} ,
		        VALUE = #{value,javaType=string,jdbcType=VARCHAR} ,
		        TYPE = #{type,javaType=long,jdbcType=DECIMAL} ,
		        MODIFIER = #{modifier,javaType=long,jdbcType=DECIMAL} ,
		        GMT_MODIFIED = #{gmtModified,javaType=object,jdbcType=TIMESTAMP} ,
		        MEMO = #{memo,javaType=string,jdbcType=VARCHAR} ,
		        DEFAULT_VALUE = #{defaultValue,javaType=string,jdbcType=VARCHAR},
		        FUNCTION = #{function,javaType=string,jdbcType=VARCHAR}
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
		<update id="updateConfig" parameterType="com.winterframework.firefrog.common.config.dao.vo.Config">
	    <![CDATA[
	        UPDATE CONFIG SET
		        MODULE = #{module,javaType=string,jdbcType=VARCHAR} ,
		        KEY = #{key,javaType=string,jdbcType=VARCHAR} ,
		        VALUE = #{value,javaType=string,jdbcType=VARCHAR} ,
		        TYPE = #{type,javaType=long,jdbcType=DECIMAL} ,
		        MODIFIER = #{modifier,javaType=long,jdbcType=DECIMAL} ,
		        GMT_MODIFIED = #{gmtModified,javaType=object,jdbcType=TIMESTAMP} ,
		        MEMO = #{memo,javaType=string,jdbcType=VARCHAR} ,
		        DEFAULT_VALUE = #{defaultValue,javaType=string,jdbcType=VARCHAR},
		        FUNCTION = #{function,javaType=string,jdbcType=VARCHAR}
	        WHERE 
		        MODULE = #{module} and KEY=#{key}
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from CONFIG where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="ConfigResult" flushCache="false">
			select <include refid="configColumns" />
		    <![CDATA[
			    from CONFIG 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="ConfigResult" flushCache="false">
			select <include refid="configColumns" />
			    from CONFIG 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	

	<sql id="configDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(module)">
				and MODULE = #{module}
			</if>
	       <if test="@Ognl@isNotEmpty(key)">
				and KEY = #{key}
			</if>
	       <if test="@Ognl@isNotEmpty(value)">
				and VALUE = #{value}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				and TYPE = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(gmtCreated)">
				and GMT_CREATED = #{gmtCreated}
			</if>
	       <if test="@Ognl@isNotEmpty(creator)">
				and CREATOR = #{creator}
			</if>
	       <if test="@Ognl@isNotEmpty(modifier)">
				and MODIFIER = #{modifier}
			</if>
	       <if test="@Ognl@isNotEmpty(gmtModified)">
				and GMT_MODIFIED = #{gmtModified}
			</if>
	       <if test="@Ognl@isNotEmpty(memo)">
				and MEMO = #{memo}
			</if>
	       <if test="@Ognl@isNotEmpty(defaultValue)">
				and DEFAULT_VALUE = #{defaultValue}
			</if>
			 <if test="@Ognl@isNotEmpty(function)">
				and FUNCTION = #{function}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="ConfigResult"  flushCache="false">
    	select <include refid="configColumns" />
	    from CONFIG 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from CONFIG 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from CONFIG 
		<include refid="configDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="ConfigResult">
    	select <include refid="configColumns" />
	    from CONFIG 
		<include refid="configDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<select id="getConfigValueByKey" parameterType="hashMap" resultType="string">
		select VALUE
	    from CONFIG where MODULE = #{module} and KEY =#{key}
	</select>
</mapper>
