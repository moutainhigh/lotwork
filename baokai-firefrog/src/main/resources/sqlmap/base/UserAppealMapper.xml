<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.user.dao.vo.UserAppeal">
	<resultMap id="UserAppealResult"
		type="com.winterframework.firefrog.user.dao.vo.UserAppeal">

	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="userAppealColumns">
	    <![CDATA[
	        	ID as id,
	        	ACCOUNT as account,
	        	APPEAL_TYPE as appealType,
	        	ID_COPY as idCopy,
	        	CARD_STRUC as cardStruc,
	        	REGISTER_AREA as registerArea,
	        	LOGIN_AREA as loginArea,
	        	RECEIVE_EMAIL as receiveEmail,
	        	PASSED as passed,
	        	OPERATER as operater,
	        	NOTICE as notice,
	        	CREATE_DATE as createDate,
	        	PASS_DATE as passDate,
	        	ACTIVED_DAYS as activedDays,
	        	OPERATOR_ACCOUNT as operaterAccount
	    ]]>
	</sql>
	
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" parameterType="com.winterframework.firefrog.user.dao.vo.UserAppeal"
		useGeneratedKeys="false" keyProperty="id" flushCache="true">
		<selectKey resultType="long" order="BEFORE" keyProperty="id">
			SELECT SEQ_USER_APPEAL_ID.Nextval from dual
		</selectKey>
			   	    
	    <![CDATA[
	        INSERT INTO
	        USER_APPEAL (
	        	ID ,
	        	ACCOUNT ,
	        	APPEAL_TYPE ,
	        	ID_COPY ,
	        	CARD_STRUC ,
	        	REGISTER_AREA ,
	        	LOGIN_AREA ,
	        	RECEIVE_EMAIL ,
	        	PASSED ,
	        	OPERATER ,
	        	NOTICE ,
	        	CREATE_DATE ,
	        	PASS_DATE ,
	        	ACTIVED_DAYS,
	        	OPERATOR_ACCOUNT
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{account,javaType=string,jdbcType=VARCHAR} ,
	        	#{appealType,javaType=long,jdbcType=DECIMAL} ,
	        	#{idCopy,javaType=string,jdbcType=VARCHAR} ,
	        	#{cardStruc,javaType=string,jdbcType=VARCHAR} ,
	        	#{registerArea,javaType=string,jdbcType=VARCHAR} ,
	        	#{loginArea,javaType=string,jdbcType=VARCHAR} ,
	        	#{receiveEmail,javaType=string,jdbcType=VARCHAR} ,
	        	#{passed,javaType=long,jdbcType=DECIMAL} ,
	        	#{operater,javaType=long,jdbcType=DECIMAL} ,
	        	#{notice,javaType=string,jdbcType=VARCHAR} ,
	        	#{createDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{passDate,javaType=object,jdbcType=TIMESTAMP} ,
	        	#{activedDays,javaType=long,jdbcType=DECIMAL} ,
	        	#{operaterAccount,javaType=string,jdbcType=VARCHAR} 
	        )
	    ]]>

	</insert>

	<update id="update" parameterType="com.winterframework.firefrog.user.dao.vo.UserAppeal">
		UPDATE USER_APPEAL
		<set>
			<if test="@Ognl@isNotEmpty(account)">
				ACCOUNT = #{account,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(appealType)">
				APPEAL_TYPE =
				#{appealType,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(idCopy)">
				ID_COPY = #{idCopy,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(cardStruc)">
				CARD_STRUC =
				#{cardStruc,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(registerArea)">
				REGISTER_AREA =
				#{registerArea,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(loginArea)">
				LOGIN_AREA =
				#{loginArea,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(receiveEmail)">
				RECEIVE_EMAIL =
				#{receiveEmail,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(passed)">
				PASSED = #{passed,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(operater)">
				OPERATER = #{operater,javaType=long,jdbcType=DECIMAL} ,
			</if>
			<if test="@Ognl@isNotEmpty(notice)">
				NOTICE = #{notice,javaType=string,jdbcType=VARCHAR} ,
			</if>
			<if test="@Ognl@isNotEmpty(createDate)">
				CREATE_DATE =
				#{createDate,javaType=object,jdbcType=TIMESTAMP} ,
			</if>
			<if test="@Ognl@isNotEmpty(passDate)">
				PASS_DATE =
				#{passDate,javaType=object,jdbcType=TIMESTAMP} ,
			</if>
			<if test="@Ognl@isNotEmpty(activedDays)">
				ACTIVED_DAYS =
				#{activedDays,javaType=long,jdbcType=DECIMAL},
			</if>
			<if test="@Ognl@isNotEmpty(operaterAccount)">
				OPERATOR_ACCOUNT =
				#{operaterAccount,javaType=string,jdbcType=VARCHAR}
			</if>
		</set>
		WHERE
		ID = #{id}
	</update>
	<delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from USER_APPEAL where
		        ID = #{id} 
	    ]]>
	</delete>
	<select id="getById" parameterType="long" resultMap="UserAppealResult"
		flushCache="false">
		select
		 UA.ID as id,
                UA.ACCOUNT as account,
                UA.APPEAL_TYPE as appealType,
                UA.ID_COPY as idCopy,
                UA.CARD_STRUC as cardStruc,
                UA.REGISTER_AREA as registerArea,
                UA.LOGIN_AREA as loginArea,
                UA.RECEIVE_EMAIL as receiveEmail,
                UA.PASSED as passed,
                UA.OPERATER as operater,
                UA.NOTICE as notice,
                UA.CREATE_DATE as createDate,
                UA.PASS_DATE as passDate,
                UA.ACTIVED_DAYS as activedDays,
                UC.VIP_LVL    as vipLvl,
                UA.OPERATOR_ACCOUNT as operaterAccount
		from USER_APPEAL UA
        LEFT JOIN USER_CUSTOMER   UC
        ON UA.account = UC.account 
 	    where 
	        UA.ID = #{id} 
		    
	</select>
	<select id="getByIds" parameterType="list" resultMap="UserAppealResult"
		flushCache="false">
		select
		<include refid="userAppealColumns" />
		from USER_APPEAL
		where id in
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select>

	<sql id="userAppealDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
			<if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(account)">
				and ACCOUNT = #{account}
			</if>
			<if test="@Ognl@isNotEmpty(appealType)">
				and APPEAL_TYPE = #{appealType}
			</if>
			<if test="@Ognl@isNotEmpty(idCopy)">
				and ID_COPY = #{idCopy}
			</if>
			<if test="@Ognl@isNotEmpty(cardStruc)">
				and CARD_STRUC = #{cardStruc}
			</if>
			<if test="@Ognl@isNotEmpty(registerArea)">
				and REGISTER_AREA = #{registerArea}
			</if>
			<if test="@Ognl@isNotEmpty(loginArea)">
				and LOGIN_AREA = #{loginArea}
			</if>
			<if test="@Ognl@isNotEmpty(receiveEmail)">
				and RECEIVE_EMAIL = #{receiveEmail}
			</if>
			<if test="@Ognl@isNotEmpty(passed)">
				and PASSED = #{passed}
			</if>
			<if test="@Ognl@isNotEmpty(operater)">
				and OPERATER = #{operater}
			</if>
			<if test="@Ognl@isNotEmpty(notice)">
				and NOTICE = #{notice}
			</if>
			<if test="@Ognl@isNotEmpty(createDate)">
				and CREATE_DATE = #{createDate}
			</if>
			<if test="@Ognl@isNotEmpty(passDate)">
				and PASS_DATE = #{passDate}
			</if>
			<if test="@Ognl@isNotEmpty(activedDays)">
				and ACTIVED_DAYS = #{activedDays}
			</if>
			<if test="@Ognl@isNotEmpty(operaterAccount)">
				and OPERATOR_ACCOUNT = #{operaterAccount}
			</if>
		</where>
	</sql>

	<select id="getAll" resultMap="UserAppealResult" flushCache="false">
		select
		<include refid="userAppealColumns" />
		from USER_APPEAL

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>
	<select id="getCount" resultType="long">
		select count(*) from
		USER_APPEAL
	</select>
	<select id="getCountByPage" resultType="long">
		select count(*) from USER_APPEAL
		<include refid="userAppealDynamicWhere" />
	</select>

	<!-- 分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页 因为分页查询将传 offset,pageSize,lastRows 
		三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现 -->
	<select id="getByPage" resultMap="UserAppealResult">
		select
		<include refid="userAppealColumns" />
		from USER_APPEAL
		<include refid="userAppealDynamicWhere" />
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>

	<select id="queryUserAppealList" resultMap="UserAppealResult"
		parameterType="HashMap">
		select
				 UA.ID as id,
                UA.ACCOUNT as account,
                UA.APPEAL_TYPE as appealType,
                UA.ID_COPY as idCopy,
                UA.CARD_STRUC as cardStruc,
                UA.REGISTER_AREA as registerArea,
                UA.LOGIN_AREA as loginArea,
                UA.RECEIVE_EMAIL as receiveEmail,
                UA.PASSED as passed,
                UA.OPERATER as operater,
                UA.NOTICE as notice,
                UA.CREATE_DATE as createDate,
                UA.PASS_DATE as passDate,
                UA.ACTIVED_DAYS as activedDays,
                UC.VIP_LVL    as vipLvl,
                UA.OPERATOR_ACCOUNT as operaterAccount
		from USER_APPEAL UA
        LEFT JOIN USER_CUSTOMER   UC
        ON UA.account = UC.account 
		<include refid="queryDynamicWhere" />
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
	</select>

	<select id="getCountByUserAppealList" resultType="long"
		parameterType="HashMap">
		select count(*) counts from USER_APPEAL UA
		<include refid="queryDynamicWhere" />
	</select>
	<sql id="queryDynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(account)">
				and UA.ACCOUNT like '%'||'${account}'||'%'
			</if>
			<if test="@Ognl@isNotEmpty(operatorAccount)">
				and UA.OPERATOR_ACCOUNT = #{operatorAccount}
			</if>
			<if test="@Ognl@isNotEmpty(appeal_type)">
				and UA.APPEAL_TYPE = #{appeal_type}
			</if>
			<if test="@Ognl@isNotEmpty(passed)">
				and UA.PASSED = #{passed}
			</if>

		</where>
	</sql>


</mapper>
