<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.notice.dao.vo.NoticeMsgVO">
	<resultMap id="NoticeMsgResult" type="com.winterframework.firefrog.notice.dao.vo.NoticeMsgVO">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="noticeMsgColumns">
	    <![CDATA[
	        	ID as id,
	        	OPERATER as operater,
	        	RECEIVES as receives,
	        	TITLE as title,
	        	CONTENT as content,
	        	GMT_CREATED as gmtCreated,
	        	GMT_SENDED as gmtSended,
	        	GMT_EXPIRED as gmtExpired,
	        	STATUS as status,
	        	DELETER as deleter,
	        	SEND_TYPE as sendType,
	        	EFFECT_HOURS as effectHours,
	        	RECEIVE_GROUPS as receiveGroups,
	        	MSGPUSH as messagePush
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.notice.dao.vo.NoticeMsgVO" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		<selectKey resultType="long" order="BEFORE" keyProperty="id">
			SELECT SEQ_NOTICE_MSG_ID.Nextval from dual
		</selectKey>
	    <![CDATA[
	        INSERT INTO
	        NOTICE_MSG (
	        	ID ,
	        	OPERATER ,
	        	RECEIVES ,
	        	TITLE ,
	        	CONTENT ,
	        	GMT_CREATED ,
	        	GMT_SENDED ,
	        	GMT_EXPIRED ,
	        	STATUS ,
	        	DELETER ,
	        	SEND_TYPE ,
	        	EFFECT_HOURS ,
	        	RECEIVE_GROUPS,
	        	MSGPUSH
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,
	        	#{operater,javaType=string,jdbcType=VARCHAR} ,
	        	#{receives,javaType=string,jdbcType=VARCHAR} ,
	        	#{title,javaType=string,jdbcType=VARCHAR} ,
	        	#{content,javaType=string,jdbcType=VARCHAR} ,
	        	#{gmtCreated,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{gmtSended,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{gmtExpired,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{status,javaType=long,jdbcType=DECIMAL} ,
	        	#{deleter,javaType=string,jdbcType=VARCHAR} ,
	        	#{sendType,javaType=long,jdbcType=DECIMAL} ,
	        	#{effectHours,javaType=long,jdbcType=DECIMAL} ,
	        	#{receiveGroups,javaType=string,jdbcType=VARCHAR},
	        	#{messagePush,javaType=string,jdbcType=VARCHAR}
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.notice.dao.vo.NoticeMsgVO">
	    <![CDATA[
	        UPDATE NOTICE_MSG SET
		        STATUS = #{status,javaType=long,jdbcType=DECIMAL}
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from NOTICE_MSG where
		        ID = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="NoticeMsgResult" flushCache="false">
			select <include refid="noticeMsgColumns" />
		    <![CDATA[
			    from NOTICE_MSG 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="NoticeMsgResult" flushCache="false">
			select <include refid="noticeMsgColumns" />
			    from NOTICE_MSG 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	

	<sql id="noticeMsgDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(operater)">
				and lower(OPERATER) like lower('%${operater}%')
			</if>
	       <if test="@Ognl@isNotEmpty(receives)">
				and RECEIVES = #{receives}
			</if>
	       <if test="@Ognl@isNotEmpty(title)">
				and lower(TITLE) like lower('%${title}%')
			</if>
	       <if test="@Ognl@isNotEmpty(content)">
				and CONTENT = #{content}
			</if>
	       <if test="@Ognl@isNotEmpty(gmtCreated)">
				and GMT_CREATED = #{gmtCreated}
			</if>
	       <if test="@Ognl@isNotEmpty(gmtSended)">
				and GMT_SENDED = #{gmtSended}
			</if>
	       <if test="@Ognl@isNotEmpty(gmtExpired)">
				and GMT_EXPIRED >= #{gmtExpired}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and STATUS = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(deleter)">
				and DELETER = #{deleter}
			</if>
	       <if test="@Ognl@isNotEmpty(sendType)">
				and SEND_TYPE = #{sendType}
			</if>
	       <if test="@Ognl@isNotEmpty(effectHours)">
				and EFFECT_HOURS = #{effectHours}
			</if>
	       <if test="@Ognl@isNotEmpty(receiveGroups)">
				and RECEIVE_GROUPS = #{receiveGroups}
			</if>
	       <if test="@Ognl@isNotEmpty(timeStart)">
				and GMT_SENDED >= #{timeStart}
			</if>
	       <if test="@Ognl@isNotEmpty(timeEnd)">
	       <![CDATA[
				and GMT_SENDED <= #{timeEnd}
			]]>
			</if>
	       <if test="@Ognl@isNotEmpty(timeExpired)">
	       <![CDATA[
				and GMT_EXPIRED <= #{timeExpired}
			]]>
			</if>
	       <if test="@Ognl@isNotEmpty(sendSatus)">
	       <![CDATA[
				and STATUS <> 1 and STATUS <> 4
			]]>
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="NoticeMsgResult"  flushCache="false">
    	select <include refid="noticeMsgColumns" />
	    from NOTICE_MSG 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from NOTICE_MSG 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from NOTICE_MSG 
		<include refid="noticeMsgDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="NoticeMsgResult">
    	select <include refid="noticeMsgColumns" />
	    from NOTICE_MSG 
		<include refid="noticeMsgDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

    <select id="getBySchedule" parameterType="hashMap" resultMap="NoticeMsgResult" flushCache="false">
			select <include refid="noticeMsgColumns" />
		    <![CDATA[
			    from NOTICE_MSG 
		        where 
		        GMT_SENDED <= #{date}
		        and STATUS=1
		    ]]>
   </select>
	
</mapper>
