<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.firefrog.game.dao.vo.GameFundQueue">
	<resultMap id="gameFundQueueResult" type="com.winterframework.firefrog.game.dao.vo.GameFundQueue">
	</resultMap>
	<!-- 用于select查询公用抽取的列 -->
	<sql id="gameFundQueueColumns"> 
	        	ID              as id, 
		        LOTTERYID       as lotteryId,
		        ISSUE_CODE      as issueCode,
		        FUND_TYPE       as fundType,
		        STATUS          as status,
		        USERID_LIST     as userIdList,
		        AMOUNT_LIST     as amountList,
		        ORDER_CODE_LIST as orderCodeList,
		        PLAN_CODE_LIST  as planCodeList,
		        NOTE            as note,
		        CREATE_TIME     as createTime,
		        UPDATE_TIME     as updateTime,
		        REMARK			as remark
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.firefrog.game.dao.vo.GameFundQueue" 
			useGeneratedKeys="false" keyProperty="id" 
		 flushCache="true">
		 <selectKey resultType="long" order="BEFORE" keyProperty="id">
				SELECT SEQ_GAME_FUND_QUEUE_ID.Nextval from dual
		</selectKey> 
	        INSERT INTO
	        GAME_FUND_QUEUE (
	        	ID, 
		        LOTTERYID,
		        ISSUE_CODE,
		        FUND_TYPE,
		        STATUS,
		        USERID_LIST,
		        AMOUNT_LIST,
		        ORDER_CODE_LIST,
		        PLAN_CODE_LIST,
		        NOTE,
		        REMARK,
		        CREATE_TIME
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=DECIMAL} ,  
	        	#{lotteryId,javaType=long,jdbcType=DECIMAL} ,
	        	#{issueCode,javaType=long,jdbcType=DECIMAL} ,
	        	#{fundType,javaType=integer,jdbcType=VARCHAR} ,
	        	#{status,javaType=integer,jdbcType=VARCHAR} ,
	        	#{userIdList,javaType=string,jdbcType=VARCHAR} ,
	        	#{amountList,javaType=string,jdbcType=VARCHAR} ,
	        	#{orderCodeList,javaType=string,jdbcType=VARCHAR} ,
	        	#{planCodeList,javaType=string,jdbcType=VARCHAR} ,
	        	#{note,javaType=string,jdbcType=VARCHAR} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP}
	        ) 
		</insert>
	    
		<update id="update" parameterType="com.winterframework.firefrog.game.dao.vo.GameFundQueue"> 
	        UPDATE GAME_FUND_QUEUE SET 
		        STATUS = #{status,javaType=integer,jdbcType=DECIMAL} ,
		        UPDATE_TIME = #{updateTime,javaType=date,jdbcType=DECIMAL} 
		     WHERE ID=#{id}  
		</update>
	    <delete id="delete" parameterType="java.lang.Long"> 
	        delete from GAME_FUND_QUEUE where ID = #{id}  
	    </delete>    
	    <select id="getById" parameterType="long" resultMap="gameFundQueueResult" flushCache="false">
		   select <include refid="gameFundQueueColumns" /> 
		     from GAME_FUND_QUEUE 
	        where ID = #{id}  
		</select>	 
	<sql id="gameFundQueueDynamicWhere">
		<!-- ognl访问静态方法的表达式 为class org.apache.maven.project.MavenProjectmethod(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and ID = #{id}
			</if> 
	       <if test="@Ognl@isNotEmpty(lotteryid)">
				and LOTTERYID = #{lotteryid}
		   </if>
	       <if test="@Ognl@isNotEmpty(issueCode)">
				and ISSUE_CODE = #{issueCode}
		   </if>
		   <if test="@Ognl@isNotEmpty(issueCode)">
				and STATUS = #{status}
		   </if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="gameFundQueueResult"  flushCache="false">
    	select <include refid="gameFundQueueColumns" />
	    from GAME_FUND_QUEUE  
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    <select id="getCountByPage" resultType="long">
        select count(1) from GAME_FUND_QUEUE 
		<include refid="gameFundQueueDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="gameFundQueueResult">
    	select <include refid="gameFundQueueColumns" />
	    from GAME_FUND_QUEUE 
		<include refid="gameFundQueueDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select> 
    <!-- 根据id正序，id的大小代表资金请求顺序 -->
    <select id="getByStatus" resultMap="gameFundQueueResult">
    	select <include refid="gameFundQueueColumns" />
	      from GAME_FUND_QUEUE 
	     where STATUS = #{status}
		  order by id asc
    </select> 
    <select id="getOrderCodeListByStatus" resultType="java.lang.String">
    	select distinct q.order_code_list
		  from (select order_code_list, id
		          from game_fund_queue
		         where STATUS = #{status}
		           and order_code_list is not null
		         order by id asc) q
    </select> 
    <select id="getByOrderCodeAndStatus" resultMap="gameFundQueueResult">
    	select <include refid="gameFundQueueColumns" />
	      from GAME_FUND_QUEUE 
	     where STATUS = #{status}
	       and order_code_list=#{orderCode}
		  order by id asc
    </select>   
    <select id="getByOrderCodeListAndStatus" resultMap="gameFundQueueResult">
    	select <include refid="gameFundQueueColumns" />
	      from GAME_FUND_QUEUE 
	     where STATUS = #{status}
	       and order_code_list in 
		<foreach item="item" index="index" collection="orderCodeList" open="(" separator="," close=")">
			#{item}				
		</foreach>  
		  order by id asc
    </select>
    <select id="getByStatusAndRowCount" resultMap="gameFundQueueResult"> 
	 	select <include refid="gameFundQueueColumns" />
		  from game_fund_queue a
		 where a.status =#{status}
		   and exists (select 1
		          from (select *
		                  from (select order_code_list, rownum as seq2
		                          from (select order_code_list,
		                                       row_number() over(partition by order_code_list order by id) as seq
		                                  from game_fund_queue q
		                                 where q.order_code_list is not null
		                                   and status = #{status}
		                                 order by q.id asc) aa
		                         where aa.seq = 1) aaa
		                 where seq2 <![CDATA[<=]]>#{rowCount} ) k
		         where a.order_code_list = k.order_code_list)
		  order by id asc  
   </select>
     
</mapper>
